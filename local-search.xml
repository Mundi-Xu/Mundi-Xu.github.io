<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>密码学初探-基于RUST的密码系统与算法简析</title>
    <link href="/2020/12/27/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%9D%E6%8E%A2-%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95%E7%AE%80%E6%9E%90/"/>
    <url>/2020/12/27/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%9D%E6%8E%A2-%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95%E7%AE%80%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>密码学（Cryptography）一般可分为古典密码学和现代密码学。</p><p>其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。古典密码学主要包含以下几个方面：</p><ul><li>单表替换加密（Monoalphabetic Cipher）</li><li>多表替换加密（Polyalphabetic Cipher）</li><li>奇奇怪怪的加密方式</li></ul><p>而现代密码学则起源于 20 世纪中后期出现的大量相关理论，1949 年香农（C. E. Shannon）发表了题为《保密系统的通信理论》的经典论文标志着现代密码学的开始。现代密码学主要包含以下几个方面：</p><ul><li>对称加密（Symmetric Cryptography），以 DES，AES，RC4 为代表。</li><li>非对称加密（Asymmetric Cryptography），以 RSA，ElGamal，椭圆曲线加密为代表。</li><li>哈希函数（Hash Function），以 MD5，SHA-1，SHA-512 等为代表。</li><li>数字签名（Digital Signature），以 RSA 签名，ElGamal 签名，DSA 签名为代表。</li></ul><p>其中，对称加密体制主要分为两种方式：</p><ul><li>分组密码（Block Cipher），又称为块密码。</li><li>序列密码（Stream Cipher），又称为流密码。</li></ul><p>一般来说，密码设计者的根本目标是保障信息及信息系统的</p><ul><li>机密性（Confidentiality）</li><li>完整性（Integrity）</li><li>可用性（Availability）</li><li>认证性（Authentication）</li><li>不可否认性（Non-repudiation）</li></ul><p>其中，前三者被称为信息安全的 CIA 三要素 。</p><p>本文主要介绍了仿射密码，流密码（RC4,LFSR+JK)，分组密码（DES,AES），非对称加密（rsa）和密码协议（Diffie_Hellman）。<br>项目详细代码已于Github开源<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/Mundi-Xu/cipher_web_rocket">[1]</span></a></sup>。</p><h1 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>仿射密码的加密函数是 $E(x)=(ax+b)\pmod m$，其中</p><ul><li>$x$ 表示明文按照某种编码得到的数字</li><li>$a$ 和 $m$ 互质</li><li>$m$ 是编码系统中字母的数目。</li></ul><p>解密函数是 $D(x)=a^{-1}(x-b)\pmod m$，其中 $a^{-1}$ 是 $a$ 在 $\mathbb{Z}_{m}$ 群的乘法逆元。</p><p>下面我们以 $E(x) = (5x + 8) \bmod 26$ 函数为例子进行介绍，加密字符串为 <code>AFFINE CIPHER</code>，这里我们直接采用字母表26个字母作为编码系统</p><table><thead><tr><th>明文</th><th>A</th><th>F</th><th>F</th><th>I</th><th>N</th><th>E</th><th>C</th><th>I</th><th>P</th><th>H</th><th>E</th><th>R</th></tr></thead><tbody><tr><td>x</td><td>0</td><td>5</td><td>5</td><td>8</td><td>13</td><td>4</td><td>2</td><td>8</td><td>15</td><td>7</td><td>4</td><td>17</td></tr><tr><td>$y=5x+8$</td><td>8</td><td>33</td><td>33</td><td>48</td><td>73</td><td>28</td><td>18</td><td>48</td><td>83</td><td>43</td><td>28</td><td>93</td></tr><tr><td>$y\mod26$</td><td>8</td><td>7</td><td>7</td><td>22</td><td>21</td><td>2</td><td>18</td><td>22</td><td>5</td><td>17</td><td>2</td><td>15</td></tr><tr><td>密文</td><td>I</td><td>H</td><td>H</td><td>W</td><td>V</td><td>C</td><td>S</td><td>W</td><td>F</td><td>R</td><td>C</td><td>P</td></tr></tbody></table><p>其对应的加密结果是 <code>IHHWVCSWFRCP</code>。</p><p>对于解密过程，正常解密者具有a与b，可以计算得到 $a^{-1}$ 为 21，所以其解密函数是$D(x)=21(x-8)\pmod {26}$ ，解密如下</p><table><thead><tr><th>密文</th><th align="left">I</th><th align="left">H</th><th>H</th><th>W</th><th>V</th><th>C</th><th>S</th><th>W</th><th>F</th><th>R</th><th>C</th><th>P</th></tr></thead><tbody><tr><td>$y$</td><td align="left">8</td><td align="left">7</td><td>7</td><td>22</td><td>21</td><td>2</td><td>18</td><td>22</td><td>5</td><td>17</td><td>2</td><td>15</td></tr><tr><td>$x=21(y-8)$</td><td align="left">0</td><td align="left">-21</td><td>-21</td><td>294</td><td>273</td><td>-126</td><td>210</td><td>294</td><td>-63</td><td>189</td><td>-126</td><td>147</td></tr><tr><td>$x\mod26$</td><td align="left">0</td><td align="left">5</td><td>5</td><td>8</td><td>13</td><td>4</td><td>2</td><td>8</td><td>15</td><td>7</td><td>4</td><td>17</td></tr><tr><td>明文</td><td align="left">A</td><td align="left">F</td><td>F</td><td>I</td><td>N</td><td>E</td><td>C</td><td>I</td><td>P</td><td>H</td><td>E</td><td>R</td></tr></tbody></table><p>可以看出其特点在于只有 26 个英文字母。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81.png" alt="仿射密码"></p><h2 id="Rust实现"><a href="#Rust实现" class="headerlink" title="Rust实现"></a>Rust实现</h2><figure class="highlight rust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// Encrypt</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> ans = <span class="hljs-built_in">String</span>::new();<br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> msg.chars() &#123;<br>    <span class="hljs-keyword">if</span> ch.is_ascii_alphabetic() &#123;<br>        <span class="hljs-keyword">if</span> ch.is_uppercase() &#123;<br>            <span class="hljs-comment">// 大写字母</span><br>            <span class="hljs-keyword">let</span> x = ch <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> - <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>            <span class="hljs-keyword">let</span> y = (upper_a * x + upper_b) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> + y;<br>            <span class="hljs-keyword">let</span> new_ch = <span class="hljs-built_in">char</span>::try_from(target).unwrap();<br>            ans.push(new_ch);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 小写字母</span><br>            <span class="hljs-keyword">let</span> x = ch <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> - <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>            <span class="hljs-keyword">let</span> y = (lower_a * x + lower_b) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> + y;<br>            <span class="hljs-keyword">let</span> new_ch = <span class="hljs-built_in">char</span>::try_from(target).unwrap();<br>            ans.push(new_ch);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ch.is_ascii_digit() &#123;<br>        <span class="hljs-comment">// 数字</span><br>        <span class="hljs-keyword">let</span> x = ch <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> - <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>        <span class="hljs-keyword">let</span> y = (number_a * x + number_b) % <span class="hljs-number">26</span>;<br>        <span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> + y;<br>        <span class="hljs-keyword">let</span> new_ch = <span class="hljs-built_in">char</span>::try_from(target).unwrap();<br>        ans.push(new_ch);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ans.push(ch);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">Ok</span>(ans);<br><br><br><span class="hljs-comment">// Decrypt</span><br><span class="hljs-keyword">let</span> lower_a_ = exgcd(lower_a <span class="hljs-keyword">as</span> <span class="hljs-built_in">i32</span>, <span class="hljs-number">26</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br><span class="hljs-keyword">let</span> upper_a_ = exgcd(upper_a <span class="hljs-keyword">as</span> <span class="hljs-built_in">i32</span>, <span class="hljs-number">26</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br><span class="hljs-keyword">let</span> number_a_ = exgcd(number_a <span class="hljs-keyword">as</span> <span class="hljs-built_in">i32</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> ans = <span class="hljs-built_in">String</span>::new();<br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> msg.chars() &#123;<br>    <span class="hljs-keyword">if</span> ch.is_ascii_alphabetic() &#123;<br>        <span class="hljs-keyword">if</span> ch.is_uppercase() &#123;<br>            <span class="hljs-comment">// 大写字母</span><br>            <span class="hljs-keyword">let</span> x = ch <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> - <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>            <span class="hljs-keyword">let</span> y = (upper_a_ * (x + <span class="hljs-number">26</span> - upper_b)) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> + y;<br>            <span class="hljs-keyword">let</span> new_ch = <span class="hljs-built_in">char</span>::try_from(target).unwrap();<br>            ans.push(new_ch);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 小写字母</span><br>            <span class="hljs-keyword">let</span> x = ch <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> - <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>            <span class="hljs-keyword">let</span> y = (lower_a_ * (x + <span class="hljs-number">26</span> - lower_b)) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> + y;<br>            <span class="hljs-keyword">let</span> new_ch = <span class="hljs-built_in">char</span>::try_from(target).unwrap();<br>            ans.push(new_ch);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ch.is_ascii_digit() &#123;<br>        <span class="hljs-comment">// 数字</span><br>        <span class="hljs-keyword">let</span> x = ch <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> - <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>        <span class="hljs-keyword">let</span> y = (number_a_ * (x + <span class="hljs-number">10</span> - number_b)) % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span> + y;<br>        <span class="hljs-keyword">let</span> new_ch = <span class="hljs-built_in">char</span>::try_from(target).unwrap();<br>        ans.push(new_ch);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ans.push(ch);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">Ok</span>(ans);<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/affine.png" alt="Affine"></p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>首先，我们可以看到的是，仿射密码对于任意两个不同的字母，其最后得到的密文必然不一样，所以其也具有最通用的特点。当密文长度足够长时，我们可以使用频率分析的方法来解决。</p><p>其次，我们可以考虑如何攻击该密码。可以看出当$a=1$ 时，仿射加密是凯撒加密。而一般来说，我们利用仿射密码时，其字符集都用的是字母表，一般只有26个字母，而不大于26的与26互素的个数一共有 </p><p>$$<br>\phi(26)=\phi(2) \times \phi(13) = 12<br>$$</p><p>算上b的偏移可能，一共有可能的密钥空间大小也就是 </p><p>$$<br>12 \times 26 = 312<br>$$</p><p>一般来说，对于该种密码，我们至少得是在已知部分明文的情况下才可以攻击。下面进行简单的分析。</p><p>这种密码由两种参数来控制，如果我们知道其中任意一个参数，那我们便可以很容易地快速枚举另外一个参数得到答案。</p><p>但是，假设我们已经知道采用的字母集，这里假设为26个字母，我们还有另外一种解密方式，我们只需要知道两个加密后的字母 $y_1,y_2$ 即可进行解密。那么我们还可以知道</p><p>$$<br>y_1=(ax_1+b)\pmod{26} \<br>y_2=(ax_2+b)\pmod{26}<br>$$</p><p>两式相减，可得</p><p>$$<br>y_1-y_2=a(x_1-x_2)\pmod{26}<br>$$</p><p>这里 $y_1,y_2$ 已知，如果我们知道密文对应的两个不一样的字符 $x_1$ 与 $x_2$ ，那么我们就可以很容易得到 $a$ ，进而就可以得到 $b$ 了。</p><h1 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h1><p>流密码一般逐字节或者逐比特处理信息。一般来说</p><ul><li>流密码的密钥长度会与明文的长度相同。</li><li>流密码的密钥派生自一个较短的密钥，派生算法通常为一个伪随机数生成算法。</li></ul><p>需要注意的是，流加密目前来说都是对称加密。</p><p>伪随机数生成算法生成的序列的随机性越强，明文中的统计特征被覆盖的更好。</p><p>流密码加解密非常简单，在已知明文的情况下，可以非常容易地获取密钥流。</p><p>流密码的关键在于设计好的伪随机数生成器。一般来说，伪随机数生成器的基本构造模块为反馈移位寄存器。当然，也有一些特殊设计的流密码，比如 RC4。</p><h2 id="反馈移位寄存器"><a href="#反馈移位寄存器" class="headerlink" title="反馈移位寄存器"></a>反馈移位寄存器</h2><p>一般的，一个 n 级反馈移位寄存器如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/n-fsr.png" alt="n-fsr"></p><p>其中</p><ul><li>$a_0$，$a_1$，…，$a_{n-1}$ 为初态。</li><li>F 为反馈函数或者反馈逻辑。如果 F 为线性函数，那么我们称其为线性反馈移位寄存器（LFSR），否则我们称其为非线性反馈移位寄存器（NFSR）。</li><li>$a_{i+n}=F(a_i,a_{i+1},…,a_{i+n-1})$ 。</li></ul><p>一般来说，反馈移位寄存器都会定义在某个有限域上，从而避免数字太大和太小的问题。因此，我们可以将其视为同一个空间中的变换，即</p><p>$(a_i,a_{i+1},…,a_{i+n-1}) \rightarrow (a_{i+1},…,a_{i+n-1},a_{i+n})$<br>.<br>对于一个序列来说，我们一般定义其生成函数为其序列对应的幂级数的和。</p><h2 id="线性反馈移位寄存器-LFSR"><a href="#线性反馈移位寄存器-LFSR" class="headerlink" title="线性反馈移位寄存器 - LFSR"></a>线性反馈移位寄存器 - LFSR</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>线性反馈移位寄存器的反馈函数一般如下</p><p>$a_{i+n}=\sum\limits_{j=1}^{n}c_ja_{i+n-j}$</p><p>其中，$c_j$ 均在某个有限域 $F_q$ 中。</p><p>既然线性空间是一个线性变换，我们可以得知这个线性变换为</p><p>$$ \begin{align*}<br>&amp;\left[<br>  a_{i+1},a_{i+2},a_{i+3}, …,a_{i+n}<br>\right]\\ \\ =&amp;\left[<br>  a_{i},a_{i+1},a_{i+2}, …,a_{i+n-1}<br>\right]\left[ \begin{matrix} 0   &amp; 0      &amp; \cdots &amp; 0 &amp; c_n     \\ 1   &amp; 0      &amp; \cdots &amp; 0 &amp; c_{n-1}  \\ 0   &amp; 1      &amp; \cdots &amp; 0 &amp; c_{n-2} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0   &amp; 0      &amp; \cdots &amp; 1 &amp; c_1     \\ \end{matrix} \right] \\ \\ =&amp;\left[<br>  a_{0},a_{1},a_{2}, …,a_{n-1}<br>\right]\left[ \begin{matrix} 0   &amp; 0      &amp; \cdots &amp; 0 &amp; c_n     \\ 1   &amp; 0      &amp; \cdots &amp; 0 &amp; c_{n-1}  \\ 0   &amp; 1      &amp; \cdots &amp; 0 &amp; c_{n-2} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0   &amp; 0      &amp; \cdots &amp; 1 &amp; c_1     \\ \end{matrix} \right]^{i+1}<br>\end{align*} $$</p><p>进而，我们可以求得其特征多项式为</p><p>$f(x)=x^n-\sum\limits_{i=1}^{n}c_ix^{n-i}$</p><p>同时，我们定义其互反多项式为</p><p>$\overline f(x)=x^nf(\frac{1}{x})=1-\sum\limits_{i=1}^{n}c_ix^{i}$</p><p>我们也称互反多项式为线性反馈移位寄存器的联结多项式。</p><p>这里有一些定理需要我们记一下，感兴趣的可以自行推导。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/lfsr-1.png" alt="lfsr-1"><br><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/lfsr-2.png" alt="lfsr-2"></p><h3 id="特征多项式与生成函数"><a href="#特征多项式与生成函数" class="headerlink" title="特征多项式与生成函数"></a>特征多项式与生成函数</h3><p>已知某个 n 级线性反馈移位寄存器的特征多项式，那么该序列对应的生成函数为</p><p>$A(x)=\frac{p(x)}{\overline f(x)}$</p><p>其中，$p(x)=\sum\limits_{i=1}^{n}(c_{n-i}x^{n-i}\sum\limits_{j=1}^{i}a_jx^{j-1})$。可以看出 p(x) 完全由初始状态和反馈函数的系数决定。</p><h3 id="序列周期与生成函数"><a href="#序列周期与生成函数" class="headerlink" title="序列周期与生成函数"></a>序列周期与生成函数</h3><p>序列的的周期为其生成函数的既约真分式的分母的周期。</p><p>对于 n 级线性反馈移位寄存器，最长周期为 $2^{n}-1$（排除全零）。达到最长周期的序列一般称为 m 序列。</p><h3 id="特殊性质"><a href="#特殊性质" class="headerlink" title="特殊性质"></a>特殊性质</h3><ul><li>将两个序列累加得到新的序列的周期为这两个序列的周期的和。</li><li>序列是 n 级 m 序列，当且仅当序列的极小多项式是 n 次本原多项式。</li></ul><h3 id="B-M-算法"><a href="#B-M-算法" class="headerlink" title="B-M 算法"></a>B-M 算法</h3><p>一般来说，我们可以从两种角度来考虑 LFSR</p><ul><li>密钥生成角度，一般我们希望使用级数尽可能低的 LFSR 来生成周期大，随机性好的序列。</li><li>密码分析角度，给定一个长度为 n 的序列 a，如何构造一个级数尽可能小的 LFSR 来生成它。其实这就是 B-M 算法的来源。</li></ul><p>一般来说，我们定义一个序列的线性复杂度如下</p><ul><li>若 s 为一个全零序列，则线性复杂度为0。</li><li>若没有 LFSR 能生成 s，则线性复杂度为无穷。</li><li>否则，s 的线性复杂度为生成 L(s) 的最小级的 LFSR。</li></ul><p>BM 算法的要求我们需要知道长度为 2n 的序列。其复杂度</p><ul><li>时间复杂度：O(n^2) 次比特操作</li><li>空间复杂度：O(n) 比特。</li></ul><p>关于 BM 算法的细节，后续添加，目前处于学习过程中。</p><p>但是其实如果我们知道了长度为 2n 的序列，我们也可以一种比较笨的方法来获取原先的序列。不妨假设已知的序列为$a_1,…,a_{2n}$，我们可以令</p><p>$S_1=(a_1,…,a_n)$</p><p>$S_2=(a_2,…,a_{n+1})$</p><p>….</p><p>$S_{n+1}=(a_{n+1},…,a_{2n})$</p><p>那么我们可以构造矩阵 $X=(S_1,…,S_n)$，那么</p><p>$S_{n+1}=(c_n,…,c_1)X$</p><p>所以</p><p>$(c_n,…,c_1)=S_{n+1}X^{-1}$</p><p>进而我们也就知道了 LFSR 的反馈表达式，进而我们就可以推出初始化种子。</p><h2 id="非线性反馈移位寄存器"><a href="#非线性反馈移位寄存器" class="headerlink" title="非线性反馈移位寄存器"></a>非线性反馈移位寄存器</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>为了使得密钥流输出的序列尽可能复杂，会使用非线性反馈移位寄存器，常见的有三种</p><ul><li>非线性组合生成器，对多个 LFSR 的输出使用一个非线性组合函数</li><li>非线性滤波生成器，对一个 LFSR 的内容使用一个非线性组合函数</li><li>钟控生成器，使用一个（或多个）LFSR 的输出来控制另一个（或多个）LFSR 的时钟 </li></ul><h3 id="非线性组合生成器"><a href="#非线性组合生成器" class="headerlink" title="非线性组合生成器"></a>非线性组合生成器</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>组合生成器一般如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/combine-generator.png" alt="combine-generator"></p><h4 id="JK触发器"><a href="#JK触发器" class="headerlink" title="JK触发器"></a>JK触发器</h4><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/JK-1.png" alt="JK-1"></p><h4 id="利用J-K触发器的非线性序列生成器"><a href="#利用J-K触发器的非线性序列生成器" class="headerlink" title="利用J-K触发器的非线性序列生成器"></a>利用J-K触发器的非线性序列生成器</h4><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/JK-2.png" alt="JK-2"></p><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/JK-3.png" alt="JK-3"></p><h4 id="Rust实现-1"><a href="#Rust实现-1" class="headerlink" title="Rust实现"></a>Rust实现</h4><figure class="highlight rust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LfsrJk</span></span> &#123;<br>    j_state: <span class="hljs-built_in">u32</span>,<br>    k_state: <span class="hljs-built_in">u32</span>,<br>    j_state_c: <span class="hljs-built_in">u32</span>,<br>    k_state_c: <span class="hljs-built_in">u32</span>,<br>    data_state: <span class="hljs-built_in">u8</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> LfsrJk &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">new</span></span>(j_state: <span class="hljs-built_in">u32</span>, k_state: <span class="hljs-built_in">u32</span>, j_state_c: <span class="hljs-built_in">u32</span>, k_state_c: <span class="hljs-built_in">u32</span>, data_state: <span class="hljs-built_in">u8</span>) -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            j_state: <span class="hljs-number">0x12345678</span> - j_state,<br>            k_state: <span class="hljs-number">0x87654321</span> - k_state,<br>            j_state_c: <span class="hljs-number">0xffffffff</span> - j_state_c,<br>            k_state_c: <span class="hljs-number">0xffffffff</span> - k_state_c,<br>            data_state,<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">crypt</span></span>(&amp;<span class="hljs-keyword">self</span>, data: &amp;<span class="hljs-keyword">mut</span> [<span class="hljs-built_in">u8</span>]) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> j_state = <span class="hljs-keyword">self</span>.j_state;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> k_state = <span class="hljs-keyword">self</span>.k_state;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> data_state = <span class="hljs-keyword">self</span>.data_state;<br>        <span class="hljs-keyword">let</span> len = data.len();<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..len &#123;<br>            <span class="hljs-keyword">let</span> j = Self::round(&amp;<span class="hljs-keyword">mut</span> j_state, <span class="hljs-keyword">self</span>.j_state_c);<br>            <span class="hljs-keyword">let</span> k = Self::round(&amp;<span class="hljs-keyword">mut</span> k_state, <span class="hljs-keyword">self</span>.k_state_c);<br>            data_state = j ^ (!(j ^ k) &amp; data_state);<br>            data[i] ^= data_state;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">#[inline]</span><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">round</span></span>(state: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">u32</span>, state_c: <span class="hljs-built_in">u32</span>) -&gt; <span class="hljs-built_in">u8</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> output = <span class="hljs-number">0u8</span>;<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">8</span> &#123;<br>            <span class="hljs-keyword">let</span> t = *state &amp; state_c;<br>            <span class="hljs-keyword">let</span> new_out = t.count_ones() % <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">let</span> out = (<span class="hljs-number">0x80000000</span> &amp; t) &gt;&gt; <span class="hljs-number">31</span>;<br>            output = (output &lt;&lt; <span class="hljs-number">1</span>) + out <span class="hljs-keyword">as</span> <span class="hljs-built_in">u8</span>;<br>            *state = (*state &lt;&lt; <span class="hljs-number">1</span>) + new_out;<br>        &#125;<br>        output<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/lfsr-jk.png" alt="lfsr-jk"></p><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>RSA 由 Ron Rivest 设计，加解密使用相同的密钥，因此也属于对称加密算法。它是面向字节的流密码，密钥长度可变，非常简单，但也很有效果。RC4 算法曾广泛应用于 SSL/TLS 协议和 WEP/WPA 协议，但由于RC4算法存在弱点，2015年2月所发布的 RFC 7465 规定禁止在TLS中使用RC4加密算法。</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>RC4 主要包含三个流程</p><ul><li>初始化 S 和 T 数组。</li><li>初始化置换 S。</li><li>生成密钥流。</li></ul><h4 id="初始化-S-和-T-数组"><a href="#初始化-S-和-T-数组" class="headerlink" title="初始化 S 和 T 数组"></a>初始化 S 和 T 数组</h4><p>初始化 S 和 T 的代码如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span> to <span class="hljs-number">255</span> <span class="hljs-keyword">do</span><br>S[i] = i<br>T[i] = K[i mod keylen])<br></code></pre></div></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/rc4_s_t.png" alt="rc4_s_t"></p><h4 id="初始化置换-S"><a href="#初始化置换-S" class="headerlink" title="初始化置换 S"></a>初始化置换 S</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span> to <span class="hljs-number">255</span> <span class="hljs-keyword">do</span> <br>j = (j + S[i] + T[i]) (mod <span class="hljs-number">256</span>) <br>swap (S[i], S[j])<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/rc4_s.png" alt="rc4_s"></p><h4 id="生成流密钥"><a href="#生成流密钥" class="headerlink" title="生成流密钥"></a>生成流密钥</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">i = j = <span class="hljs-number">0</span> <br><span class="hljs-keyword">for</span> each message byte b<br>i = (i + <span class="hljs-number">1</span>) (mod <span class="hljs-number">256</span>)<br>j = (j + S[i]) (mod <span class="hljs-number">256</span>)<br>swap(S[i], S[j])<br>t = (S[i] + S[j]) (mod <span class="hljs-number">256</span>) <br>print S[t]<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/rc4_key.png" alt="rc4_key"></p><p>我们一般称前两部分为 KSA ，最后一部分是 PRGA。</p><h3 id="Rust实现-2"><a href="#Rust实现-2" class="headerlink" title="Rust实现"></a>Rust实现</h3><figure class="highlight rust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Rc4</span></span> &#123;<br>    s: [<span class="hljs-built_in">u32</span>; <span class="hljs-number">256</span>],<br>    key: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt;,<br>&#125;<br><br><span class="hljs-keyword">impl</span> Rc4 &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">new</span></span>(key: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt;) -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> key = key;<br>        <span class="hljs-keyword">if</span> key.len() == <span class="hljs-number">0</span> &#123;<br>            key = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> rc4 = <span class="hljs-keyword">Self</span> &#123;<br>            s: [<span class="hljs-number">0u32</span>; <span class="hljs-number">256</span>],<br>            key,<br>        &#125;;<br>        rc4.init();<br>        rc4<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">init</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> k = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0u32</span>; <span class="hljs-number">256</span>];<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">256</span> &#123;<br>            <span class="hljs-keyword">self</span>.s[i] = i <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>            k[i] = <span class="hljs-keyword">self</span>.key[i % <span class="hljs-keyword">self</span>.key.len()] <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">256</span> &#123;<br>            j = (j + <span class="hljs-keyword">self</span>.s[i] + k[i]) % <span class="hljs-number">256</span>;<br>            <span class="hljs-keyword">let</span> tmp = <span class="hljs-keyword">self</span>.s[i];<br>            <span class="hljs-keyword">self</span>.s[i] = <span class="hljs-keyword">self</span>.s[j <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>];<br>            <span class="hljs-keyword">self</span>.s[j <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>] = tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">crypt</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, data: &amp;<span class="hljs-keyword">mut</span> [<span class="hljs-built_in">u8</span>]) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> s = <span class="hljs-keyword">self</span>.s.clone();<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..data.len() &#123;<br>            i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>            j = (j + s[i]) % <span class="hljs-number">256</span>;<br>            <span class="hljs-keyword">let</span> tmp = s[i];<br>            s[i] = s[j <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>];<br>            s[j <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>] = tmp;<br>            t = (s[i] + s[j <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>]) % <span class="hljs-number">256</span>;<br>            data[k] ^= s[t <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>] <span class="hljs-keyword">as</span> <span class="hljs-built_in">u8</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/rc4.png" alt="rc4"></p><h1 id="块加密"><a href="#块加密" class="headerlink" title="块加密"></a>块加密</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>所谓块加密就是每次加密一块明文，常见的加密算法有</p><ul><li>IDEA 加密</li><li>DES 加密</li><li>AES 加密</li></ul><p>块加密也是对称加密。</p><p>其实，我们也可以把块加密理解一种特殊的替代密码，但是其每次替代的是一大块。而正是由于一大块，明文空间巨大，而且对于不同的密钥，我们无法做一个表进行对应相应的密文，因此必须得有 <strong>复杂</strong> 的加解密算法来加解密明密文。</p><p>而与此同时，明文往往可能很长也可能很短，因此在块加密时往往需要两个辅助</p><ul><li>padding，即 padding 到指定分组长度</li><li>分组加密模式，即明文分组加密的方式。</li></ul><h2 id="填充规则"><a href="#填充规则" class="headerlink" title="填充规则"></a>填充规则</h2><p>正如我们之前所说，在分组加密中，明文的长度往往并不满足要求，需要进行 padding，而如何 padding 目前也已经有了不少的规定。</p><p>常见的 <a href="https://www.di-mgt.com.au/cryptopad.html">填充规则</a> 如下。<strong>需要注意的是，即使消息的长度是块大小的整数倍，仍然需要填充。</strong></p><p>一般来说，如果在解密之后发现 Padding 不正确，则往往会抛出异常。我们也因此可以知道 Paddig 是否正确。</p><h3 id="Pad-with-bytes-all-of-the-same-value-as-the-number-of-padding-bytes-PKCS5-padding"><a href="#Pad-with-bytes-all-of-the-same-value-as-the-number-of-padding-bytes-PKCS5-padding" class="headerlink" title="Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding)"></a>Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding)</h3><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)          <span class="hljs-number"> 66 </span>6F<span class="hljs-number"> 72 </span>05<span class="hljs-number"> 05 </span>05<span class="hljs-number"> 05 </span>05<br>KEY              =<span class="hljs-number"> 01 </span>23<span class="hljs-number"> 45 </span>67<span class="hljs-number"> 89 </span>AB CD EF<br>DES OUTPUT BLOCK = FD<span class="hljs-number"> 29 </span>85 C9 E8 DF<span class="hljs-number"> 41 </span>40<br></code></pre></div></td></tr></table></figure><h3 id="Pad-with-0x80-followed-by-zero-bytes-OneAndZeroes-Padding"><a href="#Pad-with-0x80-followed-by-zero-bytes-OneAndZeroes-Padding" class="headerlink" title="Pad with 0x80 followed by zero bytes (OneAndZeroes Padding)"></a>Pad with 0x80 followed by zero bytes (OneAndZeroes Padding)</h3><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)          <span class="hljs-number"> 66 </span>6F<span class="hljs-number"> 72 </span>80<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<br>KEY              =<span class="hljs-number"> 01 </span>23<span class="hljs-number"> 45 </span>67<span class="hljs-number"> 89 </span>AB CD EF<br>DES OUTPUT BLOCK = BE<span class="hljs-number"> 62 </span>5D 9F F3 C6 C8 40<br></code></pre></div></td></tr></table></figure><p>这里其实就是和 md5 和 sha1 的 padding 差不多。</p><h3 id="Pad-with-zeroes-except-make-the-last-byte-equal-to-the-number-of-padding-bytes"><a href="#Pad-with-zeroes-except-make-the-last-byte-equal-to-the-number-of-padding-bytes" class="headerlink" title="Pad with zeroes except make the last byte equal to the number of padding bytes"></a>Pad with zeroes except make the last byte equal to the number of padding bytes</h3><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)          <span class="hljs-number"> 66 </span>6f<span class="hljs-number"> 72 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>05<br>KEY              =<span class="hljs-number"> 01 </span>23<span class="hljs-number"> 45 </span>67<span class="hljs-number"> 89 </span>AB CD EF<br>DES OUTPUT BLOCK =<span class="hljs-number"> 91 </span>19 2C<span class="hljs-number"> 64 </span>B5 5C 5D B8<br></code></pre></div></td></tr></table></figure><h3 id="Pad-with-zero-null-characters"><a href="#Pad-with-zero-null-characters" class="headerlink" title="Pad with zero (null) characters"></a>Pad with zero (null) characters</h3><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)          <span class="hljs-number"> 66 </span>6f<span class="hljs-number"> 72 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<br>KEY              =<span class="hljs-number"> 01 </span>23<span class="hljs-number"> 45 </span>67<span class="hljs-number"> 89 </span>AB CD EF<br>DES OUTPUT BLOCK = 9E<span class="hljs-number"> 14 </span>FB<span class="hljs-number"> 96 </span>C5 FE EB 75<br></code></pre></div></td></tr></table></figure><h3 id="Pad-with-spaces"><a href="#Pad-with-spaces" class="headerlink" title="Pad with spaces"></a>Pad with spaces</h3><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)          <span class="hljs-number"> 66 </span>6f<span class="hljs-number"> 72 </span>20<span class="hljs-number"> 20 </span>20<span class="hljs-number"> 20 </span>20<br>KEY              =<span class="hljs-number"> 01 </span>23<span class="hljs-number"> 45 </span>67<span class="hljs-number"> 89 </span>AB CD EF<br>DES OUTPUT BLOCK = E3 FF EC E5<span class="hljs-number"> 21 </span>1F<span class="hljs-number"> 35 </span>25<br></code></pre></div></td></tr></table></figure><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>分组密码的工作模式是：根据不同的数据格式和安全性要求, 以一个具体的分组密码算法为基础构造一个分组密码系统的方法。分组密码的工作模式应当力求简单, 有效和易于实现，需要采用适当的工作模式来隐蔽明文的统计特性、数据的格式等，降低删除、重放、插入和伪造成功的机会。</p><p>分组密码的主要工作模式：</p><ol><li>电码本(ECB)模式</li><li>密码分组链接(CBC)模式</li><li>密码反馈(CFB)模式</li><li>输出反馈(OFB)模式</li><li>计数器(CTR)模式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E6%AF%94%E8%BE%83.png" alt="分组密码的工作模式比较"></p><h2 id="基本策略"><a href="#基本策略" class="headerlink" title="基本策略"></a>基本策略</h2><p>在分组密码设计时，充分使用了 Shannon 提出的两大策略：混淆与扩散两大策略。</p><h3 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h3><p>混淆，Confusion，将密文与密钥之间的统计关系变得尽可能复杂，使得攻击者即使获取了密文的一些统计特性，也无法推测密钥。一般使用复杂的非线性变换可以得到很好的混淆效果，常见的方法如下</p><ul><li>S 盒</li><li>乘法</li></ul><h3 id="扩散"><a href="#扩散" class="headerlink" title="扩散"></a>扩散</h3><p>扩散，Diffusion，使得明文中的每一位影响密文中的许多位。常见的方法有</p><ul><li>线性变换</li><li>置换</li><li>移位，循环移位</li></ul><h2 id="常见加解密结构"><a href="#常见加解密结构" class="headerlink" title="常见加解密结构"></a>常见加解密结构</h2><p>目前块加密中主要使用的是结构是</p><ul><li>迭代结构，这是因为迭代结构便于设计与实现，同时方便安全性评估。</li></ul><h3 id="迭代结构"><a href="#迭代结构" class="headerlink" title="迭代结构"></a>迭代结构</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>迭代结构基本如下，一般包括三个部分</p><ul><li>密钥置换</li><li>轮加密函数</li><li>轮解密函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/iterated_cipher.png" alt="iterated_cipher"></p><h4 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h4><p>目前来说，轮函数主要有主要有以下设计方法</p><ul><li>Feistel Network，由 Horst Feistel 发明，DES 设计者之一。<ul><li>DES</li></ul></li><li>Substitution-Permutation Network(SPN)<ul><li>AES</li></ul></li><li>其他方案</li></ul><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p>目前，密钥扩展的方法有很多，没有见到什么完美的密钥扩展方法，基本原则是使得密钥的每一个比特尽可能影响多轮的轮密钥。</p><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Data Encryption Standard(DES)，数据加密标准，是典型的块加密，其基本信息如下</p><ul><li>输入 64 位。</li><li>输出 64 位。</li><li>密钥 64 位，使用 64 位密钥中的 56 位，剩余的 8 位要么丢弃，要么作为奇偶校验位。</li><li>Feistel 迭代结构<ul><li>明文经过 16 轮迭代得到密文。</li><li>密文经过类似的 16 轮迭代得到明文。</li></ul></li></ul><h3 id="基本流程-1"><a href="#基本流程-1" class="headerlink" title="基本流程"></a>基本流程</h3><p>给出一张简单的 DES 流程图。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/des.gif" alt="des"></p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>我们可以考虑一下每一轮的加密过程</p><p>$L_{i+1}=R_i$</p><p>$R_{i+1}=L_i\oplus F(R_i,K_i)$</p><p>那么在最后的 Permutation 之前，对应的密文为$(R_{n+1},L_{n+1})$。</p><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>那么解密如何解密呢？首先我们可以把密文先进行逆置换，那么就可以得到最后一轮的输出。我们这时考虑每一轮</p><p>$R_i=L_{i+1}$</p><p>$L_i=R_{i+1}\oplus F(L_{i+1},K_i)$</p><p>因此，$(L_0,R_0)$ 就是加密时第一次置换后的明文。我们只需要再执行逆置换就可以获得明文了。</p><p>可以看出，DES 加解密使用同一套逻辑，只是密钥使用的顺序不一致。</p><h3 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h3><p>DES 中的核心部件主要包括（这里只给出加密过程的）</p><ul><li>初始置换</li><li>F 函数<ul><li>E 扩展函数</li><li>S 盒，设计标准未给出。</li><li>P 置换</li></ul></li><li>最后置换</li></ul><p>其中 F 函数如下</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/f-function.png" alt="f-function"></p><p>如果对 DES 更加感兴趣，可以进行更加仔细地研究。欢迎提供 PR。</p><h3 id="衍生"><a href="#衍生" class="headerlink" title="衍生"></a>衍生</h3><p>在 DES 的基础上，衍生了以下两种加密方式</p><ul><li>双重 DES</li><li>三种 DES</li></ul><h4 id="双重-DES"><a href="#双重-DES" class="headerlink" title="双重 DES"></a>双重 DES</h4><p>双重 DES 使用两个密钥，长度为 112 比特。加密方式如下</p><p>$C=E_{k2}(E_{k1}(P))$</p><p>但是双重 DES 不能抵抗中间相遇攻击，我们可以构造如下两个集合</p><p>$I={E_{k1}(P)}$</p><p>$J=D_{k2}(C)$</p><p>即分别枚举 K1 和 K2 分别对 P 进行加密和对 C 进行解密。</p><p>在我们对 P 进行加密完毕后，可以对加密结果进行排序，这样的复杂度为$2^nlog(2^n)=O(n2^n)$</p><p>当我们对 C 进行解密时，可以每解密一个，就去对应的表中查询。</p><p>总的复杂度为还是$O(n2^n)$。</p><h4 id="三重-DES"><a href="#三重-DES" class="headerlink" title="三重 DES"></a>三重 DES</h4><p>三重 DES 的加解密方式如下</p><p>$C=E_{k3}(D_{k2}(E_{k1}(P)))$</p><p>$P=D_{k1}(E_{k2}(D_{k3}(C)))$</p><p>在选择密钥时，可以有两种方法</p><ul><li>3 个不同的密钥，k1，k2，k3 互相独立，一共 168 比特。</li><li>2 个不同的密钥，k1 与 k2 独立，k3=k1，112 比特。</li></ul><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><ul><li>差分攻击</li><li>线性攻击</li></ul><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Advanced Encryption Standard（AES），高级加密标准，是典型的块加密，被设计来取代 DES，由 Joan Daemen 和 Vincent Rijmen 所设计。其基本信息如下</p><ul><li>输入：128 比特。</li><li>输出：128 比特。</li><li>SPN 网络结构。</li></ul><p>其迭代轮数与密钥长度有关系，如下</p><table><thead><tr><th align="center">密钥长度（比特）</th><th align="center">迭代轮数</th></tr></thead><tbody><tr><td align="center">128</td><td align="center">10</td></tr><tr><td align="center">192</td><td align="center">12</td></tr><tr><td align="center">256</td><td align="center">14</td></tr></tbody></table><h3 id="基本流程-2"><a href="#基本流程-2" class="headerlink" title="基本流程"></a>基本流程</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>在 AES 加解密过程中，每一块都是 128 比特，所以我们这里明确一些基本概念。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_data_unit.png" alt="aes_data_unit"></p><p>在 AES 中，块与 State 之间的转换过程如下</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_block2state.png" alt="aes_block2state"></p><p>所以，可以看出，每一个 block 中的字节是按照列排列进入到状态数组的。</p><p>而对于明文来说，一般我们会选择使用其十六进制进行编码。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_plain2state.png" alt="aes_plain2state"></p><h4 id="加解密过程"><a href="#加解密过程" class="headerlink" title="加解密过程"></a>加解密过程</h4><p>这里给个看雪上比较好的 <a href="http://bbs.pediy.com/thread-90722.htm">图例</a> ，以便于介绍基本的流程，每一轮主要包括</p><ul><li>轮密钥加，AddRoundKey</li><li>字节替换，SubBytes</li><li>行移位，ShiftRows</li><li>列混淆，MixColumns</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_details.jpg" alt="aes_details"></p><p>上面的列混淆的矩阵乘法等号左边的列向量应该在右边。</p><p>这里再给一张其加解密的全图，其解密算法的正确性很显然。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_enc_dec.png" alt="aes_enc_dec"></p><p>我们这里重点关注一下以下。</p><h5 id="字节替换"><a href="#字节替换" class="headerlink" title="字节替换"></a>字节替换</h5><p>在字节替换的背后，其实是有对应的数学规则来定义对应的替换表的，如下</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_subbytes.png" alt="aes_subbytes"></p><p>这里的运算均定义在 $GF(2^8)$ 内。</p><h5 id="列混淆"><a href="#列混淆" class="headerlink" title="列混淆"></a>列混淆</h5><p>这里的运算也是定义在 $GF(2^8)$ 上，使用的模多项式为 $x^8+x^4+x^3+1$。</p><h5 id="密钥扩展-1"><a href="#密钥扩展-1" class="headerlink" title="密钥扩展"></a>密钥扩展</h5><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/aes_key_expansion.png" alt="aes_key_expansion"></p><h3 id="等价解密算法"><a href="#等价解密算法" class="headerlink" title="等价解密算法"></a>等价解密算法</h3><p>简单分析一下，我们可以发现</p><ul><li>交换逆向行移位和逆向字节代替并不影响结果。</li><li>交换轮密钥加和逆向列混淆并不影响结果，关键在于<ul><li>首先可以把异或看成域上的多项式加法</li><li>然后多项式中乘法对加法具有分配率。</li></ul></li></ul><h3 id="攻击方法-1"><a href="#攻击方法-1" class="headerlink" title="攻击方法"></a>攻击方法</h3><ul><li>积分攻击</li></ul><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>在非对称密码中，加密者与解密者所使用的密钥并不一样，典型的有 RSA 加密，背包加密，椭圆曲线加密。</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用。RSA 是 1977 年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><p>RSA 算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的 RSA 密钥才可能被强力方式解破。到 2020 年为止，还没有任何可靠的攻击 RSA 算法的方式。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h4 id="公钥与私钥的产生"><a href="#公钥与私钥的产生" class="headerlink" title="公钥与私钥的产生"></a>公钥与私钥的产生</h4><ol><li>随机选择两个不同大质数 $p$ 和 $q$，计算 $N = p \times q$</li><li>根据欧拉函数，求得 $\varphi (N)=\varphi (p)\varphi (q)=(p-1)(q-1)$</li><li>选择一个小于 $\varphi (N)$ 的整数 $e$，使 $e$ 和 $\varphi (N)$ 互质。并求得 $e$ 关于 $\varphi (N)$ 的模反元素，命名为 $d$，有 $ed\equiv 1 \pmod {\varphi (N)}$</li><li>将 $p​$ 和 $q​$ 的记录销毁</li></ol><p>此时，$(N,e)$ 是公钥，$(N,d)$ 是私钥。</p><h4 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h4><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 $N$，且与 $N$ 互质的整数 $m$。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p><p>$$<br>m^{e}\equiv c\pmod N<br>$$</p><h4 id="消息解密"><a href="#消息解密" class="headerlink" title="消息解密"></a>消息解密</h4><p>利用密钥 $d​$ 进行解密。</p><p>$$<br>c^{d}\equiv m\pmod N<br>$$</p><h4 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h4><p>即我们要证$m^{ed} \equiv m \bmod N$，已知$ed \equiv 1 \bmod \phi(N)$，那么 $ed=k\phi(N)+1$，即需要证明</p><p>$$<br>m^{k\phi(N)+1}  \equiv m \bmod N<br>$$</p><p>这里我们分两种情况证明</p><p>第一种情况 $gcd(m,N)=1​$，那么 $m^{\phi(N)} \equiv 1 \bmod N​$，因此原式成立。</p><p>第二种情况 $gcd(m,N)\neq 1$，那么 $m$ 必然是 $p$ 或者 $q$ 的倍数，并且 $n=m$ 小于 $N$。我们假设</p><p>$$<br>m=xp<br>$$</p><p>那么 $x$ 必然小于 $q$，又由于 $q$ 是素数。那么</p><p>$$<br>m^{\phi(q)} \equiv 1 \bmod q<br>$$</p><p>进而</p><p>$$<br>m^{k\phi(N)}=m^{k(p-1)(q-1)}=(m^{\phi(q)})^{k(p-1)} \equiv 1 \bmod q<br>$$</p><p>那么</p><p>$$<br>m^{k\phi(N)+1}=m+uqm<br>$$</p><p>进而</p><p>$$<br>m^{k\phi(N)+1}=m+uqxp=m+uxN<br>$$</p><p>所以原式成立。</p><h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><h5 id="计算公钥和私钥"><a href="#计算公钥和私钥" class="headerlink" title="计算公钥和私钥"></a>计算公钥和私钥</h5><ol><li><p>p = 13 , q = 5</p><ul><li>N = pq = 65</li><li>r = (p-1)(q-1) = (13-1)(5-1) = 48</li></ul></li><li><p>计算模反元素<br>r=48，选择e=5，得到二元一次方程：5d-48k=1 , 获得一组解：d=29，k=3</p></li><li><p>因此，公钥是 (N, e) = (65, 5)，私钥是 (N, d) = (65, 29)。</p></li></ol><h5 id="加密信息"><a href="#加密信息" class="headerlink" title="加密信息"></a>加密信息</h5><ol><li><p>明文：m=3</p></li><li><p>计算: $ c \equiv 3^{5} \pmod 65 \equiv 48 $</p></li><li><p>因此：3被加密为48</p></li></ol><h5 id="解密信息"><a href="#解密信息" class="headerlink" title="解密信息"></a>解密信息</h5><ol><li><p>密文：c=48</p></li><li><p>计算：$ n \equiv 48^{29} \pmod 65 \equiv 3 $</p></li><li><p>因此：48被解密为3</p></li></ol><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/rsa.png" alt="rsa-1"></p><h1 id="密码协议"><a href="#密码协议" class="headerlink" title="密码协议"></a>密码协议</h1><h2 id="Diffie-Hellman-密钥交换"><a href="#Diffie-Hellman-密钥交换" class="headerlink" title="Diffie-Hellman 密钥交换"></a>Diffie-Hellman 密钥交换</h2><ul><li>密钥交换是实现安全通信的基础<ul><li>商用加密算法AES和DES需要在安全通信之前，实现通信双方的密钥共享。</li></ul></li><li>密钥交换的方法：<ul><li>基于RSA的密钥交换；</li><li>基于KDC技术 (Key Distributed Center，密钥分发中心)；</li><li><strong>Diffie-Hellman密钥交换</strong>（简称：DH算法）；</li><li>基于物理层的密钥交换。</li></ul></li></ul><p>DH算法是不安全信道下实现安全密钥共享的一种方法，由 W. Diffie 和 M.Hellman 在1976年提出的第一个公开的<strong>公钥密码算法</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/DH-1.png" alt="DH-1"></p><h2 id="DH协议案例"><a href="#DH协议案例" class="headerlink" title="DH协议案例"></a>DH协议案例</h2><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/DH-3.png" alt="DH-3"><br><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8ERUST%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%B3%BB%E7%BB%9F/DH-2.png" alt="DH-2"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/Mundi-Xu/cipher_web_rocket">https://github.com/Mundi-Xu/cipher_web_rocket</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://ctf-wiki.github.io/ctf-wiki/">ctf-wiki</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/yuankeyang/python/blob/master/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B.pdf">深入浅出密码学——常用加密技术原理与应用</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>rsa</tag>
      
      <tag>rust</tag>
      
      <tag>仿射密码</tag>
      
      <tag>流密码</tag>
      
      <tag>分组密码</tag>
      
      <tag>密码协议</tag>
      
      <tag>RC4</tag>
      
      <tag>des</tag>
      
      <tag>aes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于区块链的安全日志系统</title>
    <link href="/2020/07/01/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/07/01/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>信息系统中存在着大量的安全设备日志，这些日志对<strong>系统监控</strong>、查询、<strong>安全审计</strong>和<strong>故障诊断</strong>等都十分重要。与此同时，黑客入侵系统时，日志为黑客的行为提供了证据。因此对其进行安全的存储与处理具有重要意义。区块链技术的发展，为实现日志信息的保护、分享、<strong>取证</strong>、多边利益最大化提供了可能，为实现安全日志系统提供了保障。</p><p>基于<strong>区块链技术</strong>，本项目设计并实现了安全日志系统。该系统采用链上数据存储模式，将本地日志上传至区块链中存储，同时提供了可视化界面让用户能够使用日志相关的安全分析功能。通过安全性分析论证了该系统能够保证安全设备日志的安全可靠存储，同时为日志分析，日志取证提供便利。本项目解决了日志易被删除，篡改，伪造等问题，满足了学校、公司等云存储系统的安全日志审计，并极大的提高了数据存储的安全性，减轻运维人员的压力。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>云计算已经被认为是下一代的信息技术基础设施，因为它在信息技术的发展史上有着史无前例的优势：自助按需服务，随时随地地进行网络访问，位置独立的资源池、弹性资源，基于使用的计费以及风险转移。作为一项具有深远影响的颠覆性技术，云计算正在改变企业使用信息技术的模式，一个典型的方面是数据正在被集中外包给云。从用户角度来看，包括个人和企业用户，将数据灵活的以按需分配的方式存储到云端带来了有吸引力的好处：缓解了存储管理负担，减少了在硬件、软件以及维护人员上的花销。云存储的概念正是从云计算引申而来的，它是一种通过将网络中不同的存储设备利用分布式和集群技术组合起来协同工作的新型存储技术，并能够对外提供大量数据的存储服务以及业务访问服务。日志即为一种云存储的方式。用户通过URL请求特定域名下的资源，这些资源会被保存在特定服务器上，<strong>Web服务器在响应用户请求的同时可以以日志文件记录用户请求的全过程</strong>，即Web日志。日志几乎内建于所有的系统中，它被用于<strong>记录系统运行时产生的信息</strong>，如日常操作、网络访问、系统警告等事件的相关属性和信息。</p><p>随着互联网的迅速发展，计算机系统从防火墙、数字加密、身份认证、访问控制、数字签名技术等方面加强安全维护，但仍存在被非授权用户攻击的风险。<strong>日志经常是入侵者的主要攻击目标，容易受到篡改、删除、伪造等破坏。</strong>存储安全是数据安全的关键。因此，建立安全的日志系统是非常必要的。</p><p>区块链技术的发展，为实现日志信息的保护、分享、多边利益最大化提供了可能，为实现安全日志系统提供了保障。区块链技术具有<strong>去中心化</strong>、<strong>不可篡改</strong>和<strong>追踪溯源</strong>等特性，其应用场景已涉及医疗、电网、农产品追溯方向。区块链将信任关系从中心化的机构转移到所有参与计算的个体上，一旦某个交易被篡改，区块链网络中的节点会检测出该行为，只有多个节点同时遭受攻击时才会面临数据的丢失和泄露等风险，从而可以防止数据泄露、合谋攻击、伪造等不良行为。</p><h2 id="特色描述"><a href="#特色描述" class="headerlink" title="特色描述"></a>特色描述</h2><p>目前，区块链和日志服务系统存在以下匹配或矛盾的地方：</p><ol><li>区块链有多个副本，有助于日志的保存；</li><li>共识机制缓慢不利于日志的保存；</li><li>共识机制可保障日志的先后顺序不被打乱；</li><li>具有可追溯性，每个日志都有数字签名，可以明确查到提交者；</li><li>区块链节点数量少时安全性降低；</li><li>由于每个节点都保存日志的完整版本，对存储空间消耗大。</li></ol><p>综上所述，我们对本项目进行了系统性分析、规划，以下为该项目的特点：</p><ol><li>分布式存储多个副本；</li><li>灵活支持多种日志格式，便于程序化分析；</li><li>顺序性有保障；</li><li>防篡改；</li><li>多方签名防日志伪造；</li><li>机器使用可信根作为信任基；</li><li>日志存储准确率高；</li><li>提供可视化界面，方便查看。</li></ol><h2 id="前景分析"><a href="#前景分析" class="headerlink" title="前景分析"></a>前景分析</h2><p>区块链因为比特币的的出现为人们所熟知，从产生迄今，在金融、证券、资本和科技行业的应用呈现出爆发式增长。虽然比特币是区块链最著名的应用，但区块链可以应用于远不止加密货币的各种应用。由于它可以在没有银行或任何第三方可信中间机构的情况下在双方之间完成支付，区块链可以应用于数字资产、汇款以及在线支付等各种金融服务。此外，构建于区块链技术之上的各种应用，例如<strong>智能合约应用</strong>、<strong>物联网</strong>和<strong>安全服务</strong>等，也正在成为构建下一代互联网应用最有前景的技术之一。</p><p>区块链技术的出现也为<strong>云存储安全</strong>的研究提供了一种新的研究思路。因为在现实环境中，完全公平公开的第三方机构是不可能的，且存在多个参与方共谋攻击或者欺骗另一方的问题。区块链技术去中心化的分布式架构和去信任化的运行机制使得建立一个<strong>不依赖于可信第三方的去中心化审计</strong>架构成为可能。区块链中每个区块的数据以时间顺序加密存放，具有唯一性。倘若篡改其中某区块的数据，从理论上来说其计算开销是相当巨大的，而且修改是不可逆的，这样就制约了服务商随意篡改数据的行为。区块链技术的去中心化存储架构，只有区块链网络中的多个对等节点同时遭受攻击时才会面临数据的丢失和泄露等风险，从而可以防止数据泄露等危险。</p><p>伴随着高级持续威胁攻击的复杂多变，安全技术、产品不断推陈出新，安全厂商推出的防火墙、网络入侵检测、网络入侵防御、蜜罐、上网行为管理、安全审计、网络流量分析等众多产品涵盖到了网络安全、主机安全、Web安全、数据安全、移动安全、安全管理、工控安全等各个方面，同时也就是因为产品多样、技术多变，导致安全信息无法整合、高效利用。常见的日志服务器虽然实现了系统相关信息的存储，不能保证日志的安全问题。加强Web网站的网络和信息安全，仍需一种安全的日志系统。在这种情况下，基于区块链的安全日志系统就为解决问题提供了可能。该项目通过结合区块链技术，设计链上数据存储模式，有效地解决了日志文件易被篡改的问题，同时提供了可视化界面让用户能够使用日志相关的安全分析功能。</p><p>本项目的针对范围是提供Web服务的中小企业，它们内部维护有大量服务器，每天需要产生大量的日志，怎样合理地对日志进行分析，抓住重点，在日志中找到入侵或者非常规请求的操作，解决潜在的Web安全问题，对于有大量Web服务器的公司来说，开发一套安全的日志系统就显得尤为重要，这样不仅增强了系统的安全性，更易于服务器的维护。</p><h1 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h1><h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><h3 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h3><p>本项目设计并实现了基于区块链的安全日志系统。该系统共有三个模块：<strong>日志收集模块</strong>，<strong>日志存储模块</strong>，<strong>日志分析展示模块</strong>。日志收集模块提供日志过滤，关键字提取和日志发送的功能，支持处理任意格式日志。对于日志存储模块，我们基于fabric v0.6区块链实现日志接收，安全存储与查询功能。同时我们利用grafana数据可视化工具与区块链进行对接，实现日志可视化分析功能。在各个模块的数据传输中，会对数据进行<strong>签名</strong>来进行身份验证，以防日志伪造等问题。</p><p>整个项目的功能设计图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/System_design_drawing.jpg" alt="系统功能设计图"></p><h3 id="硬件拓扑设计"><a href="#硬件拓扑设计" class="headerlink" title="硬件拓扑设计"></a>硬件拓扑设计</h3><p>本项目的整体框架是在各个产生日志的web服务器上部署日志收集模块来获取日志，将日志发送到区块链，各节点进行共识后存储。然后grafana从区块链中读取日志数据，进行可视化分析与展示。整个系统的硬件拓扑图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Hardware_topology_design.png" alt="项目硬件拓扑设计图"></p><h3 id="具体流程设计"><a href="#具体流程设计" class="headerlink" title="具体流程设计"></a>具体流程设计</h3><h4 id="日志收集模块设计"><a href="#日志收集模块设计" class="headerlink" title="日志收集模块设计"></a>日志收集模块设计</h4><p>日志收集模块安装于各个产生日志的服务器上，运维人员通过<strong>HTTP API</strong>的方式进行日志收集任务管理、更新，脱离配置文件。日志收集模块接收到任务后，对指定的日志文件进行按行读取，等待读取至100条（默认值，可自定义修改）时，将日志打包根据任务内容进行过滤与关键字段提取，最后发送至区块链。</p><p>工作流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Collection_module_design.png" alt="日志收集模块设计流程图"></p><h4 id="区块链存储模块设计"><a href="#区块链存储模块设计" class="headerlink" title="区块链存储模块设计"></a>区块链存储模块设计</h4><p>区块链存储模块是在 hyperledger fabricv0.6 的基础上改写智能合约实现的，提供 RESTFUL API 进行日志接收，查询日志功能。</p><p>在Fabric v0.6版本中，主要分为Membership、Consensus、Chaincode、Ledger、P2P、Event Stream等核心模块。</p><ul><li>Membership：负责签发相应的E-cert、T-cert、TLS-cert等证书。会员注册、⾝身份保护、 内容保密、交易审计功 能，以保证平台访问的安全性。</li><li>Consensus：负责整个区块链的共识，统一交易顺序，保证区块链的一致性。</li><li>Chaincode：即链码（Fabric中的智能合约），用于执行区块链网络中的交易。</li><li>Ledger：用于存储Transaction log以及交易中的Key-Value。</li><li>P2P：基于Google的Grpc框架的底层网络通信层。</li><li>Event Stream：事件订阅发布组建，用于接收交易及区块事件。贯穿于其他各个组件中间，为各个组件间的异步通信提供了技术实现</li><li>区块服务（Blockchain Services）：负责节点间的共识管理、账本的分布式计算、账本的存储以及节 点间的P2P协议功能的实现，是区块链的核⼼心组成部分，为区块 链的主体功能提供了底层⽀撑。</li></ul><p>Fabric v0.6版本的架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Fabric_v0.6_architecture.png" alt="Fabric v0.6架构图"></p><p>hyperledger fabricv0.6使用pbft (Practical Byzantine Fault Tolerance,实用拜占庭容错算法)作为共识算法，可以在信任程度较低的场景下避免拜占庭问题。在3f+1个共识节点中能忍受f个节点出错且依然能实现正确共识，提高现实使用中的容错率，增强实用性。</p><p>下图为Fabric v0.6的运行流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/fabric_v0.6_flowchart.png" alt="Fabric v0.6运行流程图"></p><p>日志收集模块需要先向Membership申请E-cert，通过E-cert去申请T-cert，由T-cert对应的私钥进行签名日志发送至VP节点进行三阶段共识，完成之后各个节点会通过Chaincode按顺序执行区块中的交易，并更新账本。</p><h4 id="可视化分析模块设计"><a href="#可视化分析模块设计" class="headerlink" title="可视化分析模块设计"></a>可视化分析模块设计</h4><p>可视化分析模块基于grafana实现。我们开发grafana的插件，使其能够从区块链中读取日志并进行可视化分析。</p><p>Grafana是一款用Go语言开发的开源数据可视化工具，可以做数据监控和数据统计。Grafana具有以下特点：</p><ol><li>可视化：快速和灵活的客户端图形具有多种选项。面板插件为许多不同的方式可视化指标和日志。</li><li>报警：可视化地为最重要的指标定义警报规则。Grafana将持续评估它们，并发送通知。</li><li>通知：警报更改状态时，它会发出通知。接收电子邮件通知。</li><li>动态仪表盘：使用模板变量创建动态和可重用的仪表板，这些模板变量作为下拉菜单出现在仪表板顶部。</li><li>混合数据源：在同一个图中混合不同的数据源!可以根据每个查询指定数据源。这甚至适用于自定义数据源。</li><li>注释：注释来自不同数据源图表。将鼠标悬停在事件上可以显示完整的事件元数据和标记。</li><li>过滤器：过滤器允许您动态创建新的键/值过滤器，这些过滤器将自动应用于使用该数据源的所有查询。</li></ol><p>功能强大的grafana可以帮助我们方便地进行日志分析。</p><h2 id="详细实现"><a href="#详细实现" class="headerlink" title="详细实现"></a>详细实现</h2><h3 id="日志收集模块"><a href="#日志收集模块" class="headerlink" title="日志收集模块"></a>日志收集模块</h3><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>在日志收集任务部署时可指定每行日志必须包含的字符串数组incl[]与不可包含的字符串数组exec[]。对每行日志进行判断是否满足包含所有incl[]内的字符串，及不包含exec[]内的字符串。若不满足要求，则把该行日志丢弃。</p><h4 id="extractor"><a href="#extractor" class="headerlink" title="extractor"></a>extractor</h4><p>在日志收集任务部署时指定日志分隔符用于将该行日志分成若干段，并根据指定的对应关键字段名称及字段位置，提取出关键字段，同时将其余日志字段丢弃。也可通过不指定分隔符和关键字段名称，位置来不进行关键字段提取，这时返回整行日志。为了使日志在区块链中按时间顺序储存，在extract过程中判断有无timestamp字段，若无，则把当前时间添加到timestam字段。</p><h4 id="sender"><a href="#sender" class="headerlink" title="sender"></a>sender</h4><p>在日志收集任务部署时指定目标区块链各节点的url，并以当前日志任务名作为日志包索引，将已经过滤和提取关键字段的日志利用fabric v0.6的restful api进行日志发送。在发送时，根据任务配置中的区块链节点，每次随机选取其中一个节点作为pbft共识的主节点，进行日志发送，从而每个区块链节点都作为主节点进行共识，提高共识并行性。</p><h3 id="区块链存储模块"><a href="#区块链存储模块" class="headerlink" title="区块链存储模块"></a>区块链存储模块</h3><h4 id="接收并存储日志"><a href="#接收并存储日志" class="headerlink" title="接收并存储日志"></a>接收并存储日志</h4><p>当区块链节点接收到日志收集模块发送的chaincode invoke请求时，chaincode通过一个事务请求来执行对账本的当前状态数据库操作。chaincode执行会生成一组读写集，将接收到的第一个参数，即日志文件路径作为ID，这组读写集将被提交到状态数据库储存，并转发给其他共识节点进行pbft共识。</p><p>下图为pbft执行过程：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/pbft_flowchart1.png" alt="pbft运行流程图1"></p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/pbft_flowchart2.png" alt="pbft运行流程图2"></p><p>假设系统要求每次产生区块的时间间隔为𝑡，则在一切正常的情况下，算法按照以下流程执行： </p><ol><li>任意节点向全网广播日志数据，并附上发送者的签名 </li><li>所有备份节点均独立监听全网的日志数据，并记录在内存 </li><li>主节点在经过时间𝑡后,发送〈𝑃𝑒𝑟𝑝𝑎𝑟𝑒𝑅𝑒𝑞𝑢𝑒𝑠𝑡,ℎ,𝑣,𝑝,𝑏𝑙𝑜𝑐𝑘,〈𝑏𝑙𝑜𝑐𝑘〉𝜎𝑝〉 </li><li>备份节点𝑖在收到提案后，发送〈𝑃𝑒𝑟𝑝𝑎𝑟𝑒𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒,ℎ,𝑣,𝑖,〈𝑏𝑙𝑜𝑐𝑘〉𝜎𝑖〉 </li><li>任意节点在收到至少𝑛−𝑓个〈𝑏𝑙𝑜𝑐𝑘〉𝜎𝑖后，共识达成并发布完整的区块 </li><li>任意节点在收到完整区块后，将包含的日志从内存中删除，并开始下一轮共识</li></ol><p>该算法要求参与共识的节点中，至少有𝑛−𝑓个节点具有相同的初始状态：即对于所有的节点𝑖，具有相同的区块高度ℎ和视图编号𝑣。而这个要求很容易达成：通过区块同步来达到ℎ的一致性，通过视图更换来达到𝑣的一致性。节点在监听全网交易以及在收到提案后，需要对交易进行合法性验证。如果发现非法交易，则不能将其写入内存池；如果非法交易包含在提案中，则放弃本次共识并立即开始视图更换。 交易的验证流程如下：</p><ol><li>交易的数据格式是否符合系统规则，如果不符合则判定为非法； </li><li>交易在区块链中是否已经存在，如果存在则判定为非法； </li><li>交易的所有合约脚本是否都正确执行，如果没有则判定为非法； </li><li>交易中有没有多重支付行为，如果有则判定为非法； </li><li>如果以上判定都不符合，则为合法交易；</li></ol><p>当节点𝑖在经过2𝑣+1.𝑡的时间间隔后仍未达成共识，或接收到包含非法交易的提案后，开始进入视图更换流程：</p><ol><li>令𝑘 = 1，𝑣𝑘 = 𝑣 + 𝑘； </li><li>节点𝑖发出视图更换请求〈𝐶ℎ𝑎𝑛𝑔𝑒𝑉𝑖𝑒𝑤,ℎ,𝑣,𝑖,𝑣𝑘〉； </li><li>任意节点收到至少𝑛 − 𝑓个来自不同𝑖的相同𝑣𝑘后，视图更换达成，令𝑣 = 𝑣𝑘并开始共识； </li><li>如果在经过2𝑣𝑘+1.𝑡的时间间隔后，视图更换仍未达成，则𝑘递增并回到第2步；</li></ol><p>随着𝑘的增加，超时的等待时间也会呈指数级增加，可以避免频繁的视图更换操作，并使各节点尽快对𝑣达成一致。 而在视图更换达成之前，原来的视图𝑣依然有效，由此避免了因偶然性的网络延迟超时而导致不必要的视图更换。</p><p>最终日志在链上储存如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/On-chain_log_storage_diagram.png" alt="链上日志储存图"></p><h4 id="节点主动恢复的功能"><a href="#节点主动恢复的功能" class="headerlink" title="节点主动恢复的功能"></a>节点主动恢复的功能</h4><p>区块链网络在运行过程中，可能出现网络抖动、磁盘故障等原因，可能会导致部分节点的执行速度落后大多数节点，因此需要添加主动恢复的功能才能参与后续的共识流程，为了解决这类问题，就需要通过主动索取共识网络中所有节点的视图，最新的区块高度等信息才能更新自身的数据状态，最终与系统的数据保持一致。</p><p>在节点启动、节点状态异常或者多次发起 viewchange 却不被其他节点接受的时候，节点就应该发起主动恢复数据的请求，同步区块高度、共识网络视图等信息。</p><p>主动恢复的流程主要分为 2 步：</p><ul><li>NegotiateView 同步当前的视图信息和路由信息；</li><li>同步全网最新区块信息。</li></ul><p>以下为具体流程：</p><ol><li>待恢复节点首先广播 QueryView 消息，获取网络中所有节点的当前视图信息和路由信息</li><li>其余正常节点收到 QueryView 消息后，返回当前节点的当前视图信息 view，当前节点名称 ReplicaId 和路由信息 N（节点总数）</li><li>待恢复节点如果收到 quorum 个（2f+1）包含相同的 N 和 view 的QueryViewResonse 消息，或者收到 2f 个包含相同 N 和 view 的报文且报文的 view 不等于当前待恢复节点的 view，则将本节点的视图 view 同步成全成网络的 view 和 N</li><li>待恢复节点广播 RevoeryToCheckpoint 消息到网络所有节点，请求其余节点的检查点 checkpoint 信息和 pset、qset 和 cset 的信息（即 PBFT 算法中 pre-prepare阶段、prepare 阶段和 commit 阶段的数据）</li><li>正常节点收到 RevoeryToCheckpoint 消息和 RecoveryToPQC 信息后，将自身的检查点信息和 PQC 信息返回给待恢复节点</li><li>待恢复节点收到 quorum 个 RevoeryToCheckpointResponse 消息后，找到待恢复的稳定的 chekpoin 点，调用 stateUpdate 更新至 chekpoin 点状态，更新完毕后如果发现自身的 checkpoint 仍然落后，则发送 RecoveryToPQC 消息，获取 PQC 消息更新自身的 pset、qset 和 cset 集合。</li></ol><p>当坏节点主动恢复时流程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Node_active_recovery_flowchart.png" alt="节点主动恢复流程图"></p><h4 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h4><p>通过写 query chaincode,在其中调用 <code>ChaincodeStubInterface</code> 接口的 <code>GetHistoryForKey()</code>方法来查询指定 ID 的历史日志。外界可利用 fabric 的 <code>http api</code> 调用 query chaincode。</p><h4 id="chaincode智能合约"><a href="#chaincode智能合约" class="headerlink" title="chaincode智能合约"></a>chaincode智能合约</h4><h5 id="init"><a href="#init" class="headerlink" title="init"></a>init</h5><p>Init方法会在chaincode接收到instantiate（实例化）或者upgrade(升级)交易时被调用，进而使得chaincode顺利执行必要的初始化操作。在init参数中需给出当前日志任务名和其关键字名，创建一个空 <code>[]map[string]interface&#123;&#125;</code>，用于以后存储日志。同时将关键字名存储在<code>[]string</code>中，用于grafana查询。并初始化日志条数为0。</p><h5 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h5><p>日志收集模块触发invoke来进行日志存储。将sender发过来的日志切片进行Unmarshal反序列化后，append到已有的日志切片中，并按时间戳进行排序，保证按时间顺序存储。</p><h5 id="query"><a href="#query" class="headerlink" title="query"></a>query</h5><p>Query chiancode设计了<code>search_keywords</code>，<code>get_num</code>，<code>get_logs</code>，<code>get_delete_info</code>四种方法供grafana查询。<code>search_keywords</code>用于查询有哪些关键字，返回<code>[]string</code>；<code>get_num</code>用于查询该任务在区块链中存了多少条日志，返回<code>[]byte(int64)</code>;  <code>get_logs</code>返回每条日志的要查询的关键字段，返回<code>map[string][]interface&#123;&#125;</code>,即<code>map[关键字名称][content1,content2,...]</code>；<code>get_delete_info</code>查询历史delete操作信息，包括删除操作的时间，所删除的日志数。</p><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>用于对chaincode中所设定的时间以前的日志数据进行删除。触发<code>delete chaincode</code>，首先对所有日志按时间顺序进行遍历，并删除所有规定时间前的数据，最后记录本次删除操作的时间和删除日志数。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/blockchain_working_icon.png" alt="区块链工作图示"></p><h4 id="定期清理日志"><a href="#定期清理日志" class="headerlink" title="定期清理日志"></a>定期清理日志</h4><p>为降低存储成本，我们考虑对区块链中存储的日志区块进行定期截断。当前考虑对区块链中半年前（时间可自定义，但是固定在chiancode中的，部署之后不可修改）的日志区块进行删除。我们在<code>init</code>,<code>invoke</code>,<code>query chaincode</code>的基础上添加<code>delete chaincode</code>，用于执行区块删除操作。在peer节点启动时开启一个线程去每天触发一次delete交易，这样该delete交易通过pbft共识到达所有peer节点后，执行delete chaincode去清理半年前的日志区块。</p><p>为不破坏区块链结构，我们保留一个半年前的区块，作为被截断后的区块链的创世区块，使得截断后的区块链能够通过hash校验，保证安全性。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/Truncated_schematic.png" alt="日志区块链截断示意图"></p><h3 id="可视化分析模块"><a href="#可视化分析模块" class="headerlink" title="可视化分析模块"></a>可视化分析模块</h3><p>Grafana作为最火热的开源数据可视化工具，最大的特点就是支持多种数据源以及丰富的插件库。SimpleJson是Grafana开源社区提供的数据源，它本身并不依赖某种特定的后端存储，只需要后端能实现Grafana报表的几个查询接口就行。SimpleJson是Grafana众多数据源插件中的一种，但它又不像其他插件配置好数据库信息就能用，开发者需要自己实现一部分数据源插件的功能来使SimpleJson插件能够使用。</p><p>我们基于SimpleJson编写grafana datasource插件，使grafana 可以通过 fabric的 http api 调用 query chaincode 读取储存在区块链中的日志数据。</p><h1 id="系统分析"><a href="#系统分析" class="headerlink" title="系统分析"></a>系统分析</h1><p>本项目通过以区块链存储技术为支撑，设计并实现了一套为企业和个人用户存储日志的安全系统。相比于市面上已有的产品，具有较高的安全性，能有效防止日志遭到篡改或删除。同时提供了查询与可视化功能，方便用户针对日志进行分析，能及时有效了解服务器运行状况。</p><p>本项目的安全性分析如下：  </p><ol><li><p>以区块链为依托提高数据安全性</p><p> 本项目将日志实时发送至区块链并存储，黑客若想在本地节点篡改某一日志内容，那么根据存储的原理，首先需要伪造日志提交者的签名，姑且不论能否获得日志提交者的私钥，在签名伪造成功后，仍需持续更改本区块的hash值，这就会直接导致后续区块无法通过Hash值连接本区块，也就需要对后续区块的所有Hash值进行再计算，再更改。即使进行了如此大量的运算与更改，但也仅仅局限于本地节点的账本中区块链结构，仍需继续更改索引数据库和状态数据库。假设这些更改在本地都可以正确实施，但是，区块链是一个分布式的网络系统，单一节点的更改，必须得到其他足够多节点的认可并同步数据，这才能使后续业务正确实施。</p></li><li><p>引用pbft共识机制降低存储出错率</p><p> Pbft共识机制可以在信任程度较低的场景下避免拜占庭问题。在3f+1个共识节点中能忍受f个节点出错且依然能实现正确共识，存储日志，提高现实使用中的容错率，增强实用性；日志收集模块随机选取区块链peer节点当作共识主节点，使得多交易能够并行共识，提高系统共识效率。 </p></li><li><p>多方签名防止日志、请求伪造</p><p> 在系统部署时，区块链CA会对日志收集模块，区块链各节点和grafana插件发放证书，之后发送日志请求时，数据在分布式系统的节点间传播之前，均在本节点对数据进行一次摘要处理（Hash），并使用节点私钥对摘要实施非对称加密（签名），之后将数据与签名打包成消息传输给目标节点。在目标节点处对传输数据再实施一次摘要处理（Hash），并用原始节点的公钥解密签名后，将解密结果与摘要对比，验证一致方认为消息内容没有被篡改。从而可以防止非法用户对区块链调用chaincode，造成破坏。同时对与正常请求可根据签名追溯日志发送者，方便日后取证。</p></li><li><p>防止重复delete攻击</p><p> 本系统新设置了delete chaincode方法用于定期截断区块链，删除设定时间之前的区块。如果黑客成功通过签名验证，为防止该chaincode被黑客利用去删除其他区块，我们将设定时间设为const变量，写死在chaincode中，一旦部署chaincode就不能更改，使得黑客即使重复调用delete chaincode也不能删除设定时间内的区块；同时，chaincode由go语言编写，利用go语言的安全性质，很难出现缓冲区溢出等漏洞去篡改时间变量。</p></li><li><p>日志多副本存储实现灾备</p><p> 用区块链多节点共识存储的特性，使日志实现多副本存储，大大减小了因硬盘损坏等问题导致日志丢失的可能性。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>云存储技术的发展让人们看到了下一代互联网技术的发展方向，但同时数据泄露、数据篡改等问题限制了云存储技术的进一步发展。</p><p>基于区块链的安全日志系统为数据安全提供了很好的保障，该日志系统通过结合区块链技术，设计链上数据存储模式，有效地解决了日志文件易被篡改、数据泄露等问题，同时提供了可视化界面让用户能够使用日志相关的安全分析功能。</p><p>随着智能技术的不断发展，日志分析也应紧跟潮流，积极引入先进的技术，同时攻击手段和方法也在不停的变化和完善，因此需要多加注意这些变化，及时更新日志分析的方法，避免误判漏判的情况。目前本项目也存在一些问题：</p><ol><li>利用区块链存储日志记录，当日志变得很多的时候，由于所有的节点都需要保存有整个系统副本，因此会带来较大的存储开销。之后我们将进一步研究利用区块链的交叉级联特性，尽可能的减少冗余；</li><li>日志收集的任务部署尚未实现UI，目前只能手发http请求去部署收集任务；</li><li>可视化界面需要进一步优化，之后我们会丰富日志分析功能，同时设计界面布局，达到美观大方简洁的效果；</li></ol><p>目前的工作只是简单地实现了一个基于区块链的安全日志系统，接下来还需要对系统的提速，提高存储空间利用率进行更深一步研究，同时对于区块链在其他场景里的应用也可以做进一步的探索。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 费禹，宁静，胡青.基于区块链的日志存储系统 [J] .网络空间安全，2018, Vol. 9(6): 80-85.</p><p>[2] 韩菊茹，纪兆轩，李一鸣.基于区块链的可信日志存储与验证系统 [J] .计算机工程，2019, Vol. 45(5): 13-17.</p><p>[3] 徐治理，封化民，刘飙.一种基于信用的改进PBFT高效共识机制[J/OL].2019,36(10).[2018-06-09]</p><p>[4] 刘忆宁, 周元健, 蓝如师,等. 基于区块链的云数据删除验证协议[J]. 计算机研究与发展, 2018, 55(10):107-115.</p>]]></content>
    
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>云存储</tag>
      
      <tag>日志系统</tag>
      
      <tag>智能合约</tag>
      
      <tag>Fabric v0.6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stl-list实现分析</title>
    <link href="/2019/11/01/stl-list%E5%AE%9E%E7%8E%B0/"/>
    <url>/2019/11/01/stl-list%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="stl-list-介绍"><a href="#stl-list-介绍" class="headerlink" title="stl_list 介绍"></a>stl_list 介绍</h1><p>今天我们来总结一下stl_List, 与单链表比较而言，stl_list无非就是链表结构不一样，至于其中的增删改查的细节实现本质是一样的，都是处理指针偏移。<strong>相比于vector，stl_List在插入和删除的时候可以达到O(1)的时间复杂度</strong>。</p><p>stl_list是一个<strong>双向循环链表</strong>，相对单链表来说查找效率高，无论是插入时的前插和后插，还是从后往前查找某个元素等。既然查找效率高了，自然添加，删除和修改元素时效率也就更高。唯一一个可以称为不足的就是每个节点需要耗费4字节指针来保存前一个节点的地址，因此如果遇到对内存要求比较苛刻的场景，而且一些操作单链表即可满足，那么可以考虑使用标准库中的<strong>forward_list</strong>（单链表）。</p><h1 id="stl-list-源码分析"><a href="#stl-list-源码分析" class="headerlink" title="stl_list 源码分析"></a>stl_list 源码分析</h1><p>分析gnu c++标准库中的stl_list，我们只需把握住整体结构即可，实现总共由三部分组成，<strong>链表节点</strong>(struct _List_node : public __detail::_List_node_base) ，<strong>迭代器</strong>（struct _List_iterator），<strong>链表数据结构</strong>（class list : protected _List_base&lt;_Tp, _Alloc&gt;）。</p><p>gnu下最新版本的stl_list实现加了一些额外的继承关系，_list_base中保存了一个_List_impl _M_impl中间变量，由该类_M_impl来保存节点，并对节点做基本处理。</p><h2 id="链表节点"><a href="#链表节点" class="headerlink" title="链表节点"></a>链表节点</h2><p>父类维护两个指针，子类才加入具体的value。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">List_node_base</span></span><br><span class="hljs-class">&#123;</span><br>    _List_node_base* _M_next;<br>    _List_node_base* _M_prev;<br><br>&#125;;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">List_node</span> :</span> <span class="hljs-keyword">public</span> __detail::_List_node_base<br>&#123;<br>    <span class="hljs-comment">///&lt; User&#x27;s data.</span><br>    _Tp _M_data;<br><br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>主要是实现++和–等操作符重载，实现链表节点的前后移动。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">List_iterator</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">typedef</span> _List_iterator&lt;_Tp&gt;                _Self;<br>        <span class="hljs-keyword">typedef</span> _List_node&lt;_Tp&gt;                    _Node;<br><br>        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">ptrdiff_t</span>                          difference_type;<br>        <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">std</span>::bidirectional_iterator_tag    iterator_category;<br>        <span class="hljs-keyword">typedef</span> _Tp                                value_type;<br>        <span class="hljs-keyword">typedef</span> _Tp*                               pointer;<br>        <span class="hljs-keyword">typedef</span> _Tp&amp;                               reference;<br><br>        _List_iterator() _GLIBCXX_NOEXCEPT<br>        : _M_node() &#123; &#125;<br><br>        <span class="hljs-keyword">explicit</span><br>        _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT<br>        : _M_node(__x) &#123; &#125;<br><br>        _Self<br>        _M_const_cast() <span class="hljs-keyword">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>; &#125;<br><br>        <span class="hljs-comment">// Must downcast from _List_node_base to _List_node to get to _M_data.</span><br>        reference<br>        <span class="hljs-keyword">operator</span>*() <span class="hljs-keyword">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">static_cast</span>&lt;_Node*&gt;(_M_node)-&gt;_M_data; &#125;<br><br>        pointer<br>        <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-keyword">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::__addressof(<span class="hljs-keyword">static_cast</span>&lt;_Node*&gt;(_M_node)-&gt;_M_data); &#125;<br><br>        _Self&amp;<br>        <span class="hljs-keyword">operator</span>++() _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _M_node = _M_node-&gt;_M_next;    <span class="hljs-comment">//本质是链表节点的next指针操作</span><br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        _Self<br>        <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>) _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _Self __tmp = *<span class="hljs-keyword">this</span>;<br>            _M_node = _M_node-&gt;_M_next;<br>            <span class="hljs-keyword">return</span> __tmp;<br>        &#125;<br><br>        _Self&amp;<br>        <span class="hljs-keyword">operator</span>--() _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _M_node = _M_node-&gt;_M_prev;  <span class="hljs-comment">//本质是链表节点的prev指针操作</span><br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        _Self<br>        <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span>) _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _Self __tmp = *<span class="hljs-keyword">this</span>;<br>            _M_node = _M_node-&gt;_M_prev;<br>            <span class="hljs-keyword">return</span> __tmp;<br>        &#125;<br><br>        <span class="hljs-keyword">bool</span><br>        <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> _Self&amp; __x) <span class="hljs-keyword">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> _M_node == __x._M_node; &#125;<br><br>        <span class="hljs-keyword">bool</span><br>        <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> _Self&amp; __x) <span class="hljs-keyword">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> _M_node != __x._M_node; &#125;<br><br>        <span class="hljs-comment">// The only member points to the %list element.</span><br>        __detail::_List_node_base* _M_node; <span class="hljs-comment">//维护一个链表节点</span><br>    &#125;;<br></code></pre></div></td></tr></table></figure><h2 id="链表数据结构"><a href="#链表数据结构" class="headerlink" title="链表数据结构"></a>链表数据结构</h2><p>实现类 _List_impl，主要用来维护链表节点，然后list类包含该类。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">List_impl</span></span><br><span class="hljs-class">      :</span> <span class="hljs-keyword">public</span> _Node_alloc_type<br>      &#123;<br><br>    __detail::_List_node_base _M_node;  <span class="hljs-comment">//其实就是维护节点，标准库中用了一个中间层来处理</span><br><br>    _List_impl()<br>    : _Node_alloc_type(), _M_node()<br>    &#123; &#125;<br><br>    _List_impl(<span class="hljs-keyword">const</span> _Node_alloc_type&amp; __a) _GLIBCXX_NOEXCEPT<br>    : _Node_alloc_type(__a), _M_node()<br>    &#123; &#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __cplusplus &gt;= 201103L</span><br>    _List_impl(_Node_alloc_type&amp;&amp; __a) _GLIBCXX_NOEXCEPT<br>    : _Node_alloc_type(<span class="hljs-built_in">std</span>::move(__a)), _M_node()<br>    &#123; &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>      &#125;;<br></code></pre></div></td></tr></table></figure><p>_List_base类</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> _Alloc&gt;<br>   <span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">List_base</span></span><br><span class="hljs-class">   &#123;</span><br>   <span class="hljs-keyword">protected</span>:<br><br>     <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Alloc::<span class="hljs-keyword">template</span> rebind&lt;_List_node&lt;_Tp&gt; &gt;::other  _Node_alloc_type;<br><br>     <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Alloc::<span class="hljs-keyword">template</span> rebind&lt;_Tp&gt;::other _Tp_alloc_type;<br><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">size_t</span><br>     _S_distance(<span class="hljs-keyword">const</span> __detail::_List_node_base* __first,<br>         <span class="hljs-keyword">const</span> __detail::_List_node_base* __last)<br>     &#123;<br>   <span class="hljs-keyword">size_t</span> __n = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (__first != __last)<br>     &#123;<br>       __first = __first-&gt;_M_next;<br>       ++__n;<br>     &#125;<br>   <span class="hljs-keyword">return</span> __n;<br>     &#125;<br><br>     _List_impl _M_impl;    <span class="hljs-comment">// 中间层类</span><br><br>     <span class="hljs-comment">// count the number of nodes</span><br>     <span class="hljs-keyword">size_t</span> _M_node_count() <span class="hljs-keyword">const</span><br>     &#123;<br>   <span class="hljs-keyword">return</span> _S_distance(_M_impl._M_node._M_next,<br>              <span class="hljs-built_in">std</span>::__addressof(_M_impl._M_node));<br>     &#125;<br><br><br> <span class="hljs-keyword">public</span>:<br>     <span class="hljs-keyword">typedef</span> _Alloc allocator_type;<br><br>     <span class="hljs-keyword">void</span><br>     _M_clear() _GLIBCXX_NOEXCEPT;<br><br>     <span class="hljs-keyword">void</span><br>     _M_init() _GLIBCXX_NOEXCEPT<br>     &#123;<br>       <span class="hljs-keyword">this</span>-&gt;_M_impl._M_node._M_next = &amp;<span class="hljs-keyword">this</span>-&gt;_M_impl._M_node;<br>       <span class="hljs-keyword">this</span>-&gt;_M_impl._M_node._M_prev = &amp;<span class="hljs-keyword">this</span>-&gt;_M_impl._M_node;<br>   _M_set_size(<span class="hljs-number">0</span>);<br>     &#125;<br>   &#125;;<br></code></pre></div></td></tr></table></figure><p>list类</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> _Alloc = <span class="hljs-built_in">std</span>::allocator&lt;_Tp&gt; &gt;<br>    class <span class="hljs-built_in">list</span> : <span class="hljs-keyword">protected</span> _List_base&lt;_Tp, _Alloc&gt;<br>    &#123;<br>      <span class="hljs-comment">// concept requirements</span><br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Alloc::value_type                _Alloc_value_type;<br>      __glibcxx_class_requires(_Tp, _SGIAssignableConcept)<br>      __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)<br><br>      <span class="hljs-keyword">typedef</span> _List_base&lt;_Tp, _Alloc&gt;                    _Base;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Base::_Tp_alloc_type         _Tp_alloc_type;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Base::_Node_alloc_type       _Node_alloc_type;<br><br>    <span class="hljs-keyword">public</span>:<br>      <span class="hljs-keyword">typedef</span> _Tp                                        value_type;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::pointer           pointer;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::const_pointer     const_pointer;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::reference         reference;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::const_reference   const_reference;<br>      <span class="hljs-keyword">typedef</span> _List_iterator&lt;_Tp&gt;                        iterator;<br>      <span class="hljs-keyword">typedef</span> _List_const_iterator&lt;_Tp&gt;                  const_iterator;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">std</span>::reverse_iterator&lt;const_iterator&gt;      const_reverse_iterator;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">std</span>::reverse_iterator&lt;iterator&gt;            reverse_iterator;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">size_t</span>                                     size_type;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">ptrdiff_t</span>                                  difference_type;<br>      <span class="hljs-keyword">typedef</span> _Alloc                                     allocator_type;<br><br>    <span class="hljs-keyword">protected</span>:<br>      <span class="hljs-comment">// Note that pointers-to-_Node&#x27;s can be ctor-converted to</span><br>      <span class="hljs-comment">// iterator types.</span><br>      <span class="hljs-keyword">typedef</span> _List_node&lt;_Tp&gt;                _Node;<br><br>      <span class="hljs-keyword">using</span> _Base::_M_impl;<br>      <span class="hljs-keyword">using</span> _Base::_M_put_node;<br>      <span class="hljs-keyword">using</span> _Base::_M_get_node;<br>      <span class="hljs-keyword">using</span> _Base::_M_get_Tp_allocator;<br>      <span class="hljs-keyword">using</span> _Base::_M_get_Node_allocator;<br><br>       ..........................................................<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>大概截取了stl_list实现的一部分，主要为了体现stl_list的代码结构，具体接口实现可以查看源码。</p><h1 id="stl-list简单实现"><a href="#stl-list简单实现" class="headerlink" title="stl-list简单实现"></a>stl-list简单实现</h1><h2 id="STL-List-h"><a href="#STL-List-h" class="headerlink" title="STL_List.h"></a>STL_List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> STL_LIST</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STL_LIST</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Def.h&quot;</span></span><br><br>__MUNDI_BEGIN<br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">list</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">// The list node, the parent class maintains two pointers, and the subclass adds the specific value.</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_node_base</span>  </span><br><span class="hljs-class">  &#123;</span><br>    list_node_base* Next;<br>    list_node_base* Prev;<br><br>    list_node_base():Next(<span class="hljs-literal">nullptr</span>), Prev(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// dataEntry node</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_node</span>:</span> <span class="hljs-keyword">public</span> list_node_base<br>  &#123;<br>     T dataEntry;<br>  &#125;;<br><br>  <span class="hljs-comment">// iterator</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_iterator</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-keyword">typedef</span> list_iterator   _Self;<br>    <span class="hljs-keyword">typedef</span> T               value_type;<br>    <span class="hljs-keyword">typedef</span> T*              pointer;<br>    <span class="hljs-keyword">typedef</span> T&amp;              reference;<br><br>    list_iterator() _T_STD_NOEXCEPT<br>    &#123;<br>      m_smartPtr = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">list_iterator</span><span class="hljs-params">(list_node_base * pNode)</span> _T_STD_NOEXCEPT</span><br><span class="hljs-function">    </span>&#123;<br>      m_smartPtr = pNode;<br>    &#125;<br><br>    reference <span class="hljs-keyword">operator</span>*() _T_STD_NOEXCEPT<br>    &#123;<br>      <span class="hljs-keyword">return</span>  <span class="hljs-keyword">static_cast</span>&lt;list_node *&gt;(m_smartPtr)-&gt;dataEntry;<br>    &#125;<br><br>    list_node_base* <span class="hljs-keyword">operator</span>-&gt;() _T_STD_NOEXCEPT<br>    &#123;<br>      <span class="hljs-keyword">return</span> m_smartPtr;<br>    &#125;<br><br>    _Self <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>) _T_STD_NOEXCEPT <span class="hljs-comment">// post increment</span><br>    &#123;<br>      _Self __tmp = *<span class="hljs-keyword">this</span>;<br>      m_smartPtr = m_smartPtr-&gt;Next;<br>      <span class="hljs-keyword">return</span> __tmp;<br>    &#125;<br><br>    _Self&amp; <span class="hljs-keyword">operator</span>++() _T_STD_NOEXCEPT <span class="hljs-comment">// pre increment</span><br>    &#123;<br>      m_smartPtr = m_smartPtr-&gt;Next;<br>      <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    _Self <span class="hljs-keyword">operator</span>--(<span class="hljs-keyword">int</span>) _T_STD_NOEXCEPT<br>    &#123;<br>      _Self __tmp = *<span class="hljs-keyword">this</span>;<br>      m_smartPtr = m_smartPtr-&gt;Prev;<br>      <span class="hljs-keyword">return</span> __tmp;<br>    &#125;<br><br>    _Self&amp; <span class="hljs-keyword">operator</span>--() _T_STD_NOEXCEPT<br>    &#123;<br>      m_smartPtr = m_smartPtr-&gt;Prev;<br>      <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> list_iterator &amp; _Right) <span class="hljs-keyword">const</span> _T_STD_NOEXCEPT<br>    &#123;<br>      <span class="hljs-keyword">return</span> m_smartPtr == _Right.m_smartPtr;<br>    &#125;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> list_iterator &amp; _Right) <span class="hljs-keyword">const</span> _T_STD_NOEXCEPT<br>    &#123;<br>       <span class="hljs-keyword">return</span> m_smartPtr != _Right.m_smartPtr;<br>    &#125;<br><br>    list_node_base * m_smartPtr; <span class="hljs-comment">// Node pointer</span><br>  &#125;;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">typedef</span> list_iterator iterator;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">list</span>()  <span class="hljs-comment">// Default constructor</span><br>  &#123; <br>    empty_init();<br>  &#125;<br><br>  <span class="hljs-built_in">list</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;T&gt; &amp; rhs) <span class="hljs-comment">// Copy construction</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;rhs)<br>    &#123;<br>      empty_init(); <span class="hljs-comment">// initialization</span><br><br>      iterator itrBegin = rhs.begin();<br>      iterator itrEnd = rhs.end();<br><br>      <span class="hljs-keyword">while</span>(itrBegin != itrEnd)<br>      &#123;<br>         list_node * tmp = <span class="hljs-keyword">static_cast</span>&lt;list_node *&gt;(itrBegin.m_smartPtr);<br><br>         push_back(tmp-&gt;dataEntry);<br><br>         ++itrBegin;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-built_in">list</span> &amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span>&lt;T&gt; &amp; rhs) <span class="hljs-comment">// Assignment operator overloading</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;rhs)<br>    &#123;<br>      <span class="hljs-comment">// If the original list has a value, it will be emptied first.</span><br>      <span class="hljs-keyword">if</span>(begin() != end())<br>      &#123;<br>        clear();<br>      &#125;<br><br>      iterator itrBegin = rhs.begin();<br>      iterator itrEnd = rhs.end();<br><br>      <span class="hljs-keyword">while</span>(itrBegin != itrEnd)<br>      &#123;<br>         list_node * tmp = <span class="hljs-keyword">static_cast</span>&lt;list_node *&gt;(itrBegin.m_smartPtr);<br><br>         push_back(tmp-&gt;dataEntry);<br><br>         ++itrBegin;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  ~<span class="hljs-built_in">list</span>()  <span class="hljs-comment">// Destructor</span><br>  &#123;<br>    clear();<br><br>    <span class="hljs-keyword">if</span>(pHeadNode)<br>    &#123;<br>      <span class="hljs-keyword">delete</span> pHeadNode;<br>      pHeadNode = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span> _T_STD_NOEXCEPT</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> iterator(pHeadNode-&gt;Next);<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span> _T_STD_NOEXCEPT</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> iterator(pHeadNode);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp; value)</span></span><br><span class="hljs-function">  </span>&#123;<br>    insert(end(), value);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp; value)</span></span><br><span class="hljs-function">  </span>&#123;<br>    insert(begin(), value);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123;<br>     erase(begin()); <br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123; <br>    iterator tmp = end();<br>    erase(--tmp);<br>  &#125;<br><br>  <span class="hljs-function">T &amp; <span class="hljs-title">front</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> *begin();<br>  &#125;<br><br>  <span class="hljs-function">T &amp; <span class="hljs-title">back</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> *(--end());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp; value)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>    iterator itrBegin = begin();<br>    <span class="hljs-keyword">while</span>(itrBegin != end())<br>    &#123;<br>      <span class="hljs-keyword">if</span>(*itrBegin == value)<br>      &#123;<br>        itrBegin = erase(itrBegin);<br>        ++count;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        ++itrBegin;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(iterator position)</span></span><br><span class="hljs-function">  </span>&#123;<br>    list_node_base* next_node = position.m_smartPtr-&gt;Next;<br>    list_node_base* prev_node = position.m_smartPtr-&gt;Prev;<br>    prev_node-&gt;Next = next_node;<br>    next_node-&gt;Prev = prev_node;<br><br>    <span class="hljs-keyword">delete</span> position.m_smartPtr;<br>    position.m_smartPtr = <span class="hljs-literal">nullptr</span>;<br>    <br>    <span class="hljs-keyword">if</span>(_size &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      _size--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> iterator(next_node);<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(iterator position, <span class="hljs-keyword">const</span> T&amp; x)</span> </span><br><span class="hljs-function">  </span>&#123;<br>    list_node* tmp = <span class="hljs-keyword">new</span> list_node();<br>    tmp-&gt;dataEntry = x;<br>    tmp-&gt;Next = position.m_smartPtr;<br>    tmp-&gt;Prev = position.m_smartPtr-&gt;Prev;<br>    position.m_smartPtr-&gt;Prev-&gt;Next = tmp;<br>    position.m_smartPtr-&gt;Prev = tmp;<br><br>    ++_size;<br>    <span class="hljs-keyword">return</span> iterator(tmp);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    iterator itrBegin = begin();<br>    <span class="hljs-keyword">while</span>(itrBegin != end())<br>    &#123;<br>      list_node* tmp =  <span class="hljs-keyword">static_cast</span>&lt;list_node *&gt;(itrBegin.m_smartPtr);<br><br>      ++itrBegin;<br><br>      <span class="hljs-keyword">if</span>(tmp)<br>      &#123;<br>        <span class="hljs-keyword">delete</span> tmp;<br>      &#125;<br>    &#125;<br><br>    pHeadNode-&gt;Next = pHeadNode;<br>    pHeadNode-&gt;Prev = pHeadNode;<br>    _size = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-comment">// return length</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> _size;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">empty_init</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123; <br>    pHeadNode = <span class="hljs-keyword">new</span> list_node_base();<br>    pHeadNode-&gt;Next = pHeadNode;  <span class="hljs-comment">// Initialize pointer to itself</span><br>    pHeadNode-&gt;Prev = pHeadNode;<br><br>    _size = <span class="hljs-number">0</span>;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  list_node_base* pHeadNode; <span class="hljs-comment">// List head</span><br><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _size; <span class="hljs-comment">// the number of nodes, increase the efficiency of searching</span><br>&#125;;<br><br><br>__MUNDI_END<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><h2 id="Def-h"><a href="#Def-h" class="headerlink" title="Def.h"></a>Def.h</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __MUNDI_BEGIN namespace Mundi &#123;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __MUNDI_END &#125;</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _T_STD_NOEXCEPT</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _T_STD_NOEXCEPT noexcept</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _T_STD_USE_NOEXCEPT noexcept</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _T_STD_THROW(_EXC)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _T_STD_NOEXCEPT</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _T_STD_USE_NOEXCEPT throw()</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _T_STD_THROW(_EXC) throw(_EXC)</span><br><span class="hljs-meta"># <span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超星学习通开启自动播放模式</title>
    <link href="/2019/08/21/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/08/21/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>In three words I can sum up everything I’ve learned about life: it goes on.<br>几个字足以概括我学到的人生：一切都在继续。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fa = $(<span class="hljs-string">&quot;body&quot;</span>);<br><span class="hljs-keyword">var</span> btn = $(<span class="hljs-string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);<br><span class="hljs-keyword">var</span> json = &#123;<br>    <span class="hljs-string">&quot;background&quot;</span>: <span class="hljs-string">&quot;#66ccff&quot;</span>,<br>    <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;16px&quot;</span>,<br>    <span class="hljs-string">&quot;padding&quot;</span>: <span class="hljs-string">&quot;5px&quot;</span>,<br>    <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">0xFFFFF</span>,<br>    <span class="hljs-string">&quot;cursor&quot;</span>: <span class="hljs-string">&quot;pointer&quot;</span>,<br>    <span class="hljs-string">&quot;top&quot;</span>: <span class="hljs-string">&quot;300px&quot;</span>,<br>    <span class="hljs-string">&quot;right&quot;</span>: <span class="hljs-string">&quot;120px&quot;</span>,<br>    <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span><br>&#125;;<br>btn.css(json);<br>btn.html(<span class="hljs-string">&quot;&lt;span id=&#x27;lfsenior&#x27;&gt;开启自动播放模式&lt;/span&gt;&quot;</span>);<br>fa.append(btn);<br> <br>btn.click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br> <br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//获取iframe</span><br>        <span class="hljs-keyword">var</span> video = $(<span class="hljs-string">&quot;iframe&quot;</span>).contents().find(<span class="hljs-string">&quot;iframe&quot;</span>).contents();<br>        <span class="hljs-comment">//播放函数</span><br>        <span class="hljs-keyword">var</span> play = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            video.find(<span class="hljs-string">&quot;#video &gt; button&quot;</span>).click();<br>            <span class="hljs-keyword">var</span> jy = video.find(<span class="hljs-string">&quot;#video &gt; div.vjs-control-bar &gt; div.vjs-volume-panel.vjs-control.vjs-volume-panel-vertical &gt; button&quot;</span>);<br>            <span class="hljs-keyword">if</span> (jy.attr(<span class="hljs-string">&quot;title&quot;</span>) != <span class="hljs-string">&quot;取消静音&quot;</span>) &#123;<br>                jy.click()<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果正在加载</span><br>        <span class="hljs-keyword">var</span> load = video.find(<span class="hljs-string">&quot;#loading&quot;</span>);<br>        <span class="hljs-keyword">if</span> (load.css(<span class="hljs-string">&quot;visibility&quot;</span>) != <span class="hljs-string">&quot;hidden&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取当前进度</span><br>        <span class="hljs-keyword">var</span> spans = video.find(<span class="hljs-string">&quot;#video &gt; div.vjs-control-bar &gt; div.vjs-progress-control.vjs-control &gt; div&quot;</span>).attr(<span class="hljs-string">&quot;aria-valuenow&quot;</span>);<br>        <span class="hljs-comment">// 如果还没播放完</span><br>        <span class="hljs-keyword">if</span> (spans != <span class="hljs-number">100</span>) &#123;<br>            play();<br>        &#125;<br>        $(<span class="hljs-string">&quot;#lfsenior&quot;</span>).html(<span class="hljs-string">&quot;自动模式已开启,本章进度:&quot;</span> + spans + <span class="hljs-string">&quot;%&quot;</span>);<br>    &#125;, <span class="hljs-number">100</span>);<br> <br>&#125;);<br></code></pre></div></td></tr></table></figure><p>以Chrome为例，按F12打开Console，复制代码回车即可。</p><hr><h2 id="2019-10-18更新"><a href="#2019-10-18更新" class="headerlink" title="2019-10-18更新"></a>2019-10-18更新</h2><p>目前部分课程网站添加了前端反调试，表现为页面不断debugger，Chrome只需Ctrl + F8禁止断点即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>something useful</tag>
      
      <tag>超星学习通</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数的本质（更新中）</title>
    <link href="/2019/06/30/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <url>/2019/06/30/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>There is hardly any theory which is more elementary than linear algebra, in spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices.<br>尽管一批教授和教科书作者用关于矩阵的荒谬计算掩盖了<strong>线性代数</strong>的简明性，但鲜有比之更基本的理论。</p></blockquote><p>将只停留在数值运算和公式的线性代数与<strong>可视化几何直观</strong>（Visual Geometric Intuition）结合，整理自<a href="https://www.bilibili.com/video/av6731067/">3Blue1Brown的系列视频</a>。内容涉及到向量，线性变换，行列式，逆矩阵，点积与叉积，特征向量与特征值等，以及二次型，相似矩阵等补充内容。</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/1-Application.jpg" alt="线性代数的应用"></p><h2 id="我们为什么需要几何直观"><a href="#我们为什么需要几何直观" class="headerlink" title="我们为什么需要几何直观"></a>我们为什么需要几何直观</h2><p>在开始之前，想象学习一个事物（概念）的场景：我们需要学习<strong>正弦函数</strong>  $\sin (x)$ ，非常不幸的是，你遇到的教材告诉你，正弦函数是这样的：  </p><p>$\sin (x) = x - \frac{x^3}{3!} + \frac{x^5}{5!} + \cdots + (-1)^n\frac{x^{2n+1}}{(2n+1)!} + \cdots$</p><p>看上去很厉害的样子，并且计算机也的确是这么计算 $\sin (x)$ 的，而对你来说，计算$\sin (\frac{\pi}{6})$可能就是把 $x= \frac{\pi}{6}$ 代入公式，然后神奇的发现结果越算越接近<strong>0.5</strong> ，此时你对$\sin (x)$与三角形之间的几何直观只有一些模糊的概念，这样的学习就十分悲催了。为什么呢？再假设一个场景：<br>在学完$\sin (x)$函数后，你又去参加了一个物理课程，正弦函数随处可见，其他人很快就能知道如何使用它并能得出大概值，而刚学完正弦函数的你内心戏大概是这样的：这群学物理的脑子也太强了！</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-sin.png" width = 60% alt="sin" div align="center" /></div><br /><p>其实，你需要只是一个<strong>几何直观</strong>的灌输而已，这也从侧面佐证了一个好的老师或教材（<strong>这里的好老师真的不是他本身的学术能力有多强，而在于他擅不擅长站在学习者的角度不断的修正教学方法</strong>）是有多么重要。</p><p>教学不同层次的人：初学、入门、掌握、理解，解释的角度，方式都完全不同。更加不幸的是，为了能更加通用的用理论来描述现实生活中的规律，人类已经做了很多工作，我们常说：<strong>越通用，越抽象</strong>，这对于初学者来说堪称一段噩梦。</p><p>上述例子可能比较极端，但只为强调一件事：直观理解很重要，或者说，<strong>学习方法很重要</strong>。好的学习方法即你如何直观的去理解（可能是几何的，或是现实中的具体例子）一个抽象的事物，并<strong>层次化的建立知识与知识间的联系</strong>，构建并健壮属于自己的知识图谱。个人观点是，这种<strong>学习方法</strong>是最高效的。它唯一的要求在于，<strong>需要一定的基础知识</strong>打底，一定的量变结合方法论（点拨或领悟）就是质变。</p><h1 id="向量究竟是什么"><a href="#向量究竟是什么" class="headerlink" title="向量究竟是什么"></a>向量究竟是什么</h1><blockquote><p>The introduction of numbers as <strong>coordinates</strong> is an act of violence.<br>引入一些数作为<strong>坐标</strong>是一种鲁莽的行为。</p></blockquote><h2 id="不同视角下的向量"><a href="#不同视角下的向量" class="headerlink" title="不同视角下的向量"></a>不同视角下的向量</h2><p>对于向量的这个概念，大家一定并不陌生，但是这次让我们从<strong>数学</strong>，<strong>物理</strong>，<strong>计算机</strong>三个角度来看待如何定义这个<strong>向量</strong>这个概念。</p><h3 id="物理专业角度"><a href="#物理专业角度" class="headerlink" title="物理专业角度"></a>物理专业角度</h3><ul><li>向量是<strong>空间中的箭头</strong></li><li>决定一个向量的是：<strong>它的长度和它所指的方向</strong></li></ul><h3 id="计算机专业角度"><a href="#计算机专业角度" class="headerlink" title="计算机专业角度"></a>计算机专业角度</h3><ul><li>向量是有序的<strong>数字列表</strong></li><li>向量不过是“列表”一个花哨的说法</li><li>向量的<strong>维度</strong>等于“列表”的<strong>长度</strong></li></ul><h3 id="数学专业角度"><a href="#数学专业角度" class="headerlink" title="数学专业角度"></a>数学专业角度</h3><p>对数学来说，它的本质就是通用和抽象，所以，数学家希望概括这两种观点:</p><ul><li>向量可以是任何东西，只需要保证：<strong>两个向量相加及数字与向量相乘有意义</strong></li><li><strong>向量加法</strong>和<strong>向量乘法</strong>贯穿线性代数始终，十分重要</li></ul><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-MathVector.png" width = 70% alt="vector" /><p>可以通过上图直观的感受到数学家在想什么。左边是物理角度，右边是计算机角度，但是很抱歉，<strong>我能用一些抽象的定义和约束让你们变成一个东西</strong>。</p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>把向量置于坐标系中，以原点为起点，坐标正负表示方向，可完美把两个不同的角度融合。</p><ul><li>向量加法<ul><li>物理：首尾相连 (Motion)</li><li>计算机：坐标相加</li></ul></li><li>向量乘法<ul><li>物理：缩放 (Scaling)</li><li>计算机：坐标和比例相乘</li></ul></li></ul><p>实际上无论你怎么看待向量都无所谓，或把向量看作空间中的箭头，或把向量看作数字列表，线性代数的效用很少体现在这些观点中的其中一个上，而是更多的体现在它能够在这些观点中<strong>互相转化</strong>。线性代数为数据分析提供了一条将大量数据列表<strong>概念化、可视化</strong>的渠道，它能让数据样式变得非常明晰，并让你大致了解其特定运算的意义。同时，线性代数给物理学家和计算机图形程序员提供了一种方法去通过计算机能处理的数字来<strong>描述并操纵空间</strong>（例如<a href="https://github.com/3b1b/manim">Mathematical Animation Engine</a>)。</p><h1 id="线性组合、基与其张成的空间"><a href="#线性组合、基与其张成的空间" class="headerlink" title="线性组合、基与其张成的空间"></a>线性组合、基与其张成的空间</h1><blockquote><p>Mathematics requires a small dose, not of genius, but of an <strong>imaginative freedom</strong> which, in a larger dose, would be insanity.<br>数学需要的不是天赋，而是少量的<strong>自由想象</strong>，但想象太过自由又会陷入疯狂。</p></blockquote><p>本部分继续加深一个概念，为何<strong>向量加法与向量乘法</strong>是那么重要，并从始至终贯穿整个线性代数（关于后面的直观解释部分，强烈建议去<a href="https://www.bilibili.com/video/av6731067/?p=3">原视频</a>观看动画演示）。  </p><h2 id="线性组合"><a href="#线性组合" class="headerlink" title="线性组合"></a>线性组合</h2><p>二维空间中任意两个<strong>不共线的非零向量</strong>都可以表示该空间中的任意一个向量，写成符号语言就是： $a \mathbf{\vec v} + b \mathbf{\vec w}$ 。</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-linear-comb.png" width = 65% alt="linear-comb" /></div><br /><p>至于为什么被称为“线性”，有一种几何直观：如果你固定其中一个标量，让另一个标量自由变化，所产生的向量终点会描出一条直线。（这里其实很不严谨，具体定义请参阅课本。）</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-Linear.gif" width = 60% alt="Linear" /></div><br /><h2 id="空间的基-Basis"><a href="#空间的基-Basis" class="headerlink" title="空间的基 (Basis)"></a>空间的基 (Basis)</h2><p>对于我们常见的笛卡尔坐标系，有一组最直观的基：${ \hat{\imath},{\hat{\jmath}} }$，即单位向量 $\hat{\imath}=(1,0)$ 和 $\hat{\jmath}=(0,1)$,通过$\hat{\imath}$和${\hat{\jmath}}$的<strong>拉伸与相加</strong>可以组成笛卡尔坐标系中的任意一个向量。（上述的任意两个不共线的非零向量也可以作为二维空间的一组基。）</p><h3 id="张成的空间-Span"><a href="#张成的空间-Span" class="headerlink" title="张成的空间 (Span)"></a>张成的空间 (Span)</h3><p>同理，我们可以选择不同的基向量，而这些基向量构成的空间就称为其张成的空间。张成二字比较拗口，可以类比为<strong>延伸或扩展</strong>。直观来看，就是本文所有图中的网格。笛卡尔坐标系就是一个由单位坐标${ \hat{\imath},{\hat{\jmath}} }$张成的空间（同时也是上述任意两个不共线的非零向量所张成的空间）。所有可以表示为给定向量（基）<strong>线性组合</strong>（刚刚讲了这个概念）的向量的集合，被称为给定向量（基）张成的空间。</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-span.png" width = 60% alt="span" div align=center /></div><br />如果你继续思考一下，会发现一个特点：**并不是每一组给定向量都可以张成一个空间**，若这两个向量共线（2D），共面（3D），它们就只能被限制在一个直线或面中，类似于“降维打击”（这也是我强调不共线且向量非零的原因）。通过这个直观的思考可以引出以下概念：<h3 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h3><p>关于什么是线性相关，有两种表达：</p><ul><li>你有多个向量，并且可以<strong>移除其中一个而不减小张成的空间</strong>（即2D共线或3D共面），我们称它们（这些向量）线性相关。</li><li>其中一个向量，可以<strong>表示为其他向量的线性组合</strong>，因为这个向量已经落在其他向量张成的空间之中。</li></ul><p>从统计学角度来说，就是指这些向量之中有<strong>冗余</strong>。即在这一堆向量中，我们只需要其中几个（取决于维度）就可以表示所有其他的向量。<br>由此，我们可以得出以下部分：</p><h3 id="向量空间中一组基的严格定义"><a href="#向量空间中一组基的严格定义" class="headerlink" title="向量空间中一组基的严格定义"></a>向量空间中一组基的严格定义</h3><p>向量空间的一组基是张成该空间的一个<strong>线性无关向量集</strong>。  </p><blockquote><p>在线性代数中，基(basis)（也称为基底）是描述、刻画向量空间的基本工具。向量空间的基是它的一个特殊的子集，基的元素称为<strong>基向量</strong>。向量空间中<strong>任意一个元素</strong>，都可以<strong>唯一</strong>地表示成基向量的线性组合。如果基中元素个数有限，就称向量空间为有限维向量空间，将<strong>元素的个数</strong>称作向量空间的<strong>维数</strong>。 使用基底可以便利地描述向量空间。  </p></blockquote><p>用这样的步骤来慢慢导出这个定义，个人感觉，远比在课堂的第一分钟就将这句让你迷惑的话丢给你好的多，<strong>抽象的东西只有在慢慢推倒中你才能发现它的精巧之处，非常优雅且迷人</strong>。  </p><h1 id="矩阵与线性变换"><a href="#矩阵与线性变换" class="headerlink" title="矩阵与线性变换"></a>矩阵与线性变换</h1><blockquote><p>Unfortunately, no one can be told what the <strong>Matrix</strong> is. You have to <strong>see it for yourself</strong>.<br>很遗憾，<strong>矩阵</strong>是什么是说不清的。你必须得自己亲眼看看。  </p></blockquote><p>矩阵，最直观的理解当然是一个<strong>写成方阵的数字</strong> $\begin{pmatrix}1&amp;0 \\ 0&amp;1 \end{pmatrix}$，这几节的核心是为了说明：矩阵其实就是一种<strong>向量变换</strong>（至于什么是变换下面会讲），并附带一种不用死记硬背的考虑矩阵向量乘法的方法。  </p><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p><strong>变换</strong>本质上是<strong>函数</strong>（下左图）的一种花哨的说法，它接受输入内容，并输出对应结果，特别的，在矩阵变换（下右图）中，我们接受一个向量并且输出另一个向量。  </p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-fun.gif" width = "50%" div align=left /><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-trans.gif" width = "50%" div align=right />  <p>那既然<strong>变换</strong>和<strong>函数</strong>意义相同，为什么要用多余的术语困惑我们呢？因为使用<strong>变换</strong>是在暗示以特定方式来可视化这一<strong>输入$\to$输出关系</strong>。一种理解“向量的函数”的方法就是就是使用<strong>运动</strong>。</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-movement.gif" width = 70% alt="motion" /></div><br /><p>这世界上有非常多优美的变换，如果你将他们可视化，就能得到下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8/2-trans.gif" alt="2-trans"></p><h2 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h2><p>我们说具有以下两个性质的就是线性变换（直观可视化如下图）：</p><ul><li>直线在变换后仍然<strong>保持为直线</strong>，不能有所弯曲。</li><li><strong>原点必须保持固定</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/3-trans.gif" width = 50% alt="Linear-trans" /><p>用一句话总结就是：线性变换是<strong>保持网格线平行且等距分布</strong>的变换（如果变换后保持直线不变但原点改变则为仿射变换，即<strong>线性变换+平移</strong>）。</p><h2 id="如何用数值描述线性变换"><a href="#如何用数值描述线性变换" class="headerlink" title="如何用数值描述线性变换"></a>如何用数值描述线性变换</h2><p>这里需要使用上一节提到的工具，<strong>空间的基</strong>，也就是单位向量（基向量）：$\hat{\imath}=(1,0)$ 和 $\hat{\jmath}=(0,1)$  </p><p>对线性变换，我们只需要关注两个<strong>基向量</strong> $\hat{\imath}$ 和 $\hat{\jmath}$<strong>变换后的位置</strong>即可。例如，$\hat{\imath}$ 变换到$(3,1)$的位置，$\hat{\jmath}$ 变换到$(1,2)$的位置,将$\hat{\imath}$<strong>变换后的坐标</strong>竖起来作为方阵的第一列（绿色表示），$\hat{\jmath}$<strong>变换后的坐标</strong>竖起来作为方阵的第二列（红色表示），得到矩阵$\begin{pmatrix}\color{green}3&amp;\color{red}1 \\ \color{green}1&amp;\color{red}2 \end{pmatrix}$。假设我们想要知道目标向量$(-1,2)$进行变换后的位置，那么这个矩阵就是对<strong>变换过程</strong>最好的描述，一图胜千言。</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-matrix.gif" width = 75% alt="matrix" div align=center /></div><ul><li>Step1： 绿色$\hat{\imath}$（x轴）进行移动（变换）</li><li>Step2： 红色$\hat{\jmath}$（y轴）进行移动（变换）</li><li>Step3： 目标向量x轴<strong>坐标值</strong>与$\hat{\imath}$<strong>变换后向量</strong>进行<strong>向量乘法</strong></li><li>Step4： 目标向量y轴<strong>坐标值</strong>与$\hat{\jmath}$<strong>变换后向量</strong>进行<strong>向量乘法</strong></li><li>Step5： 两者进行<strong>向量加法</strong>，得到线性变换结果</li></ul><br /><p>更加一般的情况，我们用变量来代替其中的具体值，其中绿色代表$\hat{\imath}$变换后的向量，红色代表$\hat{\jmath}$变换后的向量：</p><p>$\begin{pmatrix}\color{green}a&amp;\color{red}b \\ \color{green}c&amp;\color{red}d \end{pmatrix}\begin{pmatrix} x \\ y\end{pmatrix} = \underbrace{x \begin{pmatrix}\color{green}a \\ \color{green}c \end{pmatrix} +  y \begin{pmatrix} \color{red}b \\ \color{red}d \end{pmatrix}}_{\text{直观的部分这里}} = \begin{pmatrix}\color{green}{a}\color{black}{x}+\color{red}{b}\color{black}{y} \\ \color{green}{c}\color{black}{x}+\color{red}{d}\color{black}{y}\end{pmatrix}$  </p><p>上面的公式就是我们常说的<strong>矩阵乘法公式</strong>，现在，不要强行背诵，结合可视化的直观动图，你一辈子都不会忘记的。</p><h2 id="线性的严格定义"><a href="#线性的严格定义" class="headerlink" title="线性的严格定义"></a>线性的严格定义</h2><p>在给出一个数学化抽象的解释前，先做一下总结：</p><ul><li><strong>线性变换</strong>是操纵<strong>空间</strong>的一种手段，它<strong>保持网格线平行且等距分布，并保持原点不动</strong></li><li><strong>矩阵</strong>是描述这种<strong>变换</strong>的一组数字，或者说一种<strong>描述线性变换的语言</strong></li></ul><p>在数学上，<strong>线性</strong>的严格定义如下述公式，这些性质，会在之后进行讨论，也可以在这里就进行一些思考，为什么说向量加法和向量乘法贯穿线性代数始终？</p><p>$L(\mathbf {\vec v} + \mathbf{\vec w}) = L(\mathbf {\vec v}) + L(\mathbf {\vec w}) \qquad 可加性（对加法封闭）$<br>$L(c \mathbf {\vec v}) = c L(\mathbf {\vec v}) \qquad 成比例（对数乘封闭）$</p><h1 id="矩阵乘法与线性变换复合"><a href="#矩阵乘法与线性变换复合" class="headerlink" title="矩阵乘法与线性变换复合"></a>矩阵乘法与线性变换复合</h1><blockquote><p>It is my experience that proofs involving matrices can be shortened by 50% if one throws the matrices out.<br>据我的经验，如果<strong>丢掉矩阵</strong>的话，那些涉及<strong>矩阵</strong>的证明可以缩短一半。  </p></blockquote><h2 id="复合变换"><a href="#复合变换" class="headerlink" title="复合变换"></a>复合变换</h2><p>如果对一个向量先进行一次旋转变换，再进行一次剪切变换( $\hat {\imath}$保持$(1,0)$不变, $\hat{\jmath}$移动到坐标$(1,1)$),如下图所示：  </p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-comp.png" width = 75% alt="matrix" div align=center /></div><br />那么如果通过旋转矩阵和剪切矩阵来求得这个符合矩阵呢？为了解决这个问题，我们定义这个过程叫做**矩阵的乘法**。<h2 id="矩阵乘法的计算"><a href="#矩阵乘法的计算" class="headerlink" title="矩阵乘法的计算"></a>矩阵乘法的计算</h2><p>在这里我们发现，矩阵乘法的变换顺序是<strong>从右往左读的</strong>（这一个常识很重要，你得明白这一点，有基本概念），也和我们熟知的复合函数形式 $f(g(x))$ 是一致的。</p><p>那么如何求解矩阵乘法呢？对线性代数有印象的同学现在能马上记起来那个稍显复杂的公式吗？如果有些忘记了，那么，现在，就有一个一辈子也忘不了的直观解释方法：</p><div align = "center">    <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/线性代数的本质/1-cal.gif" width = 75% alt="cal" div align=center /></div><br />如图，$M_1$矩阵的第一列表示的是$\hat{\imath}$变换的位置，先把它拿出来，$M_2$矩阵看成对这个变换过的$\hat{\imath}$进行一次变换（按照前文的规则）。同理，针对$\hat{\jmath}$做一样的操作，就可以得出这个表达式。<h2 id="矩阵乘法的运算规律"><a href="#矩阵乘法的运算规律" class="headerlink" title="矩阵乘法的运算规律"></a>矩阵乘法的运算规律</h2><p>通常学生在学习矩阵乘法时都会记住上述公式并通过一些特定的运算加强记忆（包括我），但是在记忆这个过程前，我希望你能养成<strong>思考矩阵乘法意义</strong>的习惯，也就是<strong>两个变换相继作用</strong>。这能形成一个更好的概念性框架，并让你更容易理解矩阵乘积的性质。<br>举个栗子，矩阵相乘时，它们的先后顺序影响结果吗？有了上面的想法，可以自己试着在不进行计算的条件下思考一下，然后再尝试证明<strong>结合律</strong>与<strong>分配律</strong>是否成立。你会发现，原来线性代数是这么的直观，完全<strong>不需要计算</strong>。  </p><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1><p> <img src="https://cdn.jsdelivr.net/gh/Mundi-Xu/picture_resource@master/picture/%E9%80%9A%E7%94%A8/%E6%8B%96%E6%9B%B4.png" alt="waiting"></p>]]></content>
    
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一种神奇的rsa加密算法</title>
    <link href="/2018/11/29/%E4%B8%80%E7%A7%8D%E7%A5%9E%E5%A5%87%E7%9A%84rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2018/11/29/%E4%B8%80%E7%A7%8D%E7%A5%9E%E5%A5%87%E7%9A%84rsa%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><p><strong>新的算法并没有透露 <code>n</code>，只给定了两个大整数：<code>(p*q)^(p+q)</code> 和 <code>(p*q)^(p-q)</code>，其中 <code>^</code> 是按位异或运算。</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><br>p = sympy.randprime(<span class="hljs-number">2</span> ** <span class="hljs-number">1023</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">1024</span>)<br>q = sympy.randprime(<span class="hljs-number">2</span> ** <span class="hljs-number">1023</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">1024</span>)<br><br>a = (p * q) ^ (p + q)<br>b = (p * q) ^ (p - q)<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>m = <span class="hljs-built_in">int</span>.from_bytes(flag, <span class="hljs-string">&#x27;big&#x27;</span>)<br><br>print(a, b, <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, p * q))<br><br></code></pre></div></td></tr></table></figure><hr><h2 id="2018年12月20日更新"><a href="#2018年12月20日更新" class="headerlink" title="2018年12月20日更新"></a>2018年12月20日更新</h2><p>我们定义 $ f_1(x,y) = (x \ast y)^{(x+y)} 和 f_2(x,y) = (x \ast y)^{(x-y)} $ ，我们发现这两个函数都有一个共同的性质，就是函数值的最低 n 个二进制位只和 x、y 的最低 n 个二进制位有关。也就是说，我们可以用 a 和 b 的最低 n 位来判断 p 和 q 的最低 n 位是否可能正确。如果它们的最低 n 位满足 $ f_1 $和 $f_2$ 函数，那么它们就是 p 和 q 低位的候选答案；如果不满足，它们就根本不可能是真正 p 和 q 的低位。所以我们可以从一个二进制位（n=1）开始，每次增加一位。每增加一位时，我们把原来满足条件的 p 和 q 低位的每种可能情况分别在前面加上 0 或 1，这样每种情况就变成了 4 种新的情况，然后对所有新的情况用 $ f_1 $ 和 $ f_2 $ 函数提供的约束条件进行过滤，只保留满足条件的情况。当跑到 1024 位的时候，就只会剩下真正满足条件的 p 和 q 了。然后，我们根据 RSA 的原理，在 mod (p-1)*(q-1) 的意义下对 e 求逆元，得到私钥 d，计算 pow(c, d, p*q)即可得到 flag 的大整数表示。</p><p><strong>求解脚本如下</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>a, b, c = [<span class="hljs-built_in">int</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>).read().split()]<br><span class="hljs-comment">#假设已将加密内容保存到 output.txt 文件中</span><br><br>f1 = <span class="hljs-keyword">lambda</span> p, q: (p * q) ^ (p + q)<br>f2 = <span class="hljs-keyword">lambda</span> p, q: (p * q) ^ (p - q)<br><br>candidates = &#123;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)&#125;<br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1025</span>):<br>    print(m, <span class="hljs-built_in">len</span>(candidates))<br>    candidates_ = <span class="hljs-built_in">set</span>()<br>    mask = (<span class="hljs-number">2</span> &lt;&lt; m) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> candidates:<br>        <span class="hljs-keyword">if</span> f1(x, y) == a <span class="hljs-keyword">and</span> f2(x, y) == b:<br>            p, q = x, y<br>            d = gmpy2.invert(<span class="hljs-number">65537</span>, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>            m = <span class="hljs-built_in">pow</span>(c, d, p * q)<br>            print(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br>            exit()<br>        <span class="hljs-keyword">for</span> bx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">for</span> by <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                xx = x + (bx &lt;&lt; m)<br>                yy = y + (by &lt;&lt; m)<br>                <span class="hljs-keyword">if</span> f1(xx, yy) &amp; mask != a &amp; mask:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> f2(xx, yy) &amp; mask != b &amp; mask:<br>                    <span class="hljs-keyword">continue</span><br>                candidates_.add((xx, yy))<br>candidates = candidates_<br><br></code></pre></div></td></tr></table></figure><p><strong>有几个人做出来了呢（坏笑:）</strong></p><p>[^1]hackergame2018-RSA_of_Z</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>crypto</tag>
      
      <tag>rsa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/10/25/hello-world/"/>
    <url>/2018/10/25/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-My-Blog-This-is-my-first-post"><a href="#Welcome-to-My-Blog-This-is-my-first-post" class="headerlink" title="Welcome to My Blog ! This is my first post"></a>Welcome to My Blog ! This is my first post</h2><h2 id="My-Instagram-mundi-xu"><a href="#My-Instagram-mundi-xu" class="headerlink" title="My Instagram: mundi.xu"></a>My Instagram: mundi.xu</h2><h2 id="Thank-you-for-subscribing-me"><a href="#Thank-you-for-subscribing-me" class="headerlink" title="Thank you for subscribing me"></a>Thank you for subscribing me</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
